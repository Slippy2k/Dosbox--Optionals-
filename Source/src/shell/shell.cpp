/*
 *  Copyright (C) 2002-2017  The DOSBox Team
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include <assert.h>
#include <stdlib.h>
#include <stdarg.h>
#include <string.h>
#include "dosbox.h"
#include "regs.h"
#include "control.h"
#include "shell.h"
#include "callback.h"
#include "support.h"
#include "..\gui\version.h"


Bitu call_shellstop;
/* Larger scope so shell_del autoexec can use it to
 * remove things from the environment */
Program * first_shell = 0;

static Bitu shellstop_handler(void) {
	return CBRET_STOP;
}

static void SHELL_ProgramStart(Program * * make) {
	*make = new DOS_Shell;
}

#define AUTOEXEC_SIZE 4096
static char autoexec_data[AUTOEXEC_SIZE] = { 0 };
static std::list<std::string> autoexec_strings;
typedef std::list<std::string>::iterator auto_it;

void VFILE_Remove(const char *name);

void AutoexecObject::Install(const std::string &in) {
	if(GCC_UNLIKELY(installed)) E_Exit("autoexec: already created %s",buf.c_str());
	installed = true;
	buf = in;
	autoexec_strings.push_back(buf);
	this->CreateAutoexec();

	//autoexec.bat is normally created AUTOEXEC_Init.
	//But if we are already running (first_shell)
	//we have to update the envirionment to display changes

	if(first_shell)	{
		//create a copy as the string will be modified
		std::string::size_type n = buf.size();
		char* buf2 = new char[n + 1];
		safe_strncpy(buf2, buf.c_str(), n + 1);
		if((strncasecmp(buf2,"set ",4) == 0) && (strlen(buf2) > 4)){
			char* after_set = buf2 + 4;//move to variable that is being set
			char* test = strpbrk(after_set,"=");
			if(!test) {first_shell->SetEnv(after_set,"");return;}
			*test++ = 0;
			//If the shell is running/exists update the environment
			first_shell->SetEnv(after_set,test);
		}
		delete [] buf2;
	}
}

void AutoexecObject::InstallBefore(const std::string &in) {
	if(GCC_UNLIKELY(installed)) E_Exit("autoexec: already created %s",buf.c_str());
	installed = true;
	buf = in;
	autoexec_strings.push_front(buf);
	this->CreateAutoexec();
}

void AutoexecObject::CreateAutoexec(void) {
	/* Remove old autoexec.bat if the shell exists */
	if(first_shell)	VFILE_Remove("AUTOEXEC.BAT");

	//Create a new autoexec.bat
	autoexec_data[0] = 0;
	size_t auto_len;
	for(auto_it it=  autoexec_strings.begin(); it != autoexec_strings.end(); it++) {
		auto_len = strlen(autoexec_data);
		if ((auto_len+(*it).length()+3)>AUTOEXEC_SIZE) {
			E_Exit("SYSTEM:Autoexec.bat file overflow");
		}
		sprintf((autoexec_data+auto_len),"%s\r\n",(*it).c_str());
	}
	if(first_shell) VFILE_Register("AUTOEXEC.BAT",(Bit8u *)autoexec_data,(Bit32u)strlen(autoexec_data));
}

AutoexecObject::~AutoexecObject(){
	if(!installed) return;

	// Remove the line from the autoexecbuffer and update environment
	for(auto_it it = autoexec_strings.begin(); it != autoexec_strings.end(); ) {
		if((*it) == buf) {
			it = autoexec_strings.erase(it);
			std::string::size_type n = buf.size();
			char* buf2 = new char[n + 1];
			safe_strncpy(buf2, buf.c_str(), n + 1);
			// If it's a environment variable remove it from there as well
			if((strncasecmp(buf2,"set ",4) == 0) && (strlen(buf2) > 4)){
				char* after_set = buf2 + 4;//move to variable that is being set
				char* test = strpbrk(after_set,"=");
				if(!test){
					delete [] buf2;
					continue;
				}
				*test = 0;
				//If the shell is running/exists update the environment
				if(first_shell) first_shell->SetEnv(after_set,"");
			}
			delete [] buf2;
		} else it++;
	}
	this->CreateAutoexec();
}

DOS_Shell::DOS_Shell():Program(){
	input_handle=STDIN;
	echo=true;
	exit=false;
	bf=0;
	call=false;
	completion_start = NULL;
}

Bitu DOS_Shell::GetRedirection(char *s, char **ifn, char **ofn,bool * append) {

	char * lr=s;
	char * lw=s;
	char ch;
	Bitu num=0;
	bool quote = false;
	char* t;

	while ( (ch=*lr++) ) {
		if(quote && ch != '"') { /* don't parse redirection within quotes. Not perfect yet. Escaped quotes will mess the count up */
			*lw++ = ch;
			continue;
		}

		switch (ch) {
		case '"':
			quote = !quote;
			break;
		case '>':
			*append=((*lr)=='>');
			if (*append) lr++;
			lr=ltrim(lr);
			free(*ofn);
			*ofn=lr;
			while (*lr && *lr!=' ' && *lr!='<' && *lr!='|') lr++;
			//if it ends on a : => remove it.
			if((*ofn != lr) && (lr[-1] == ':')) lr[-1] = 0;
//			if(*lr && *(lr+1))
//				*lr++=0;
//			else
//				*lr=0;
			t = (char*)malloc(lr-*ofn+1);
			safe_strncpy(t,*ofn,lr-*ofn+1);
			*ofn=t;
			continue;
		case '<':
			free(*ifn);
			lr=ltrim(lr);
			*ifn=lr;
			while (*lr && *lr!=' ' && *lr!='>' && *lr != '|') lr++;
			if((*ifn != lr) && (lr[-1] == ':')) lr[-1] = 0;
//			if(*lr && *(lr+1))
//				*lr++=0;
//			else
//				*lr=0;
			t = (char*)malloc(lr-*ifn+1);
			safe_strncpy(t,*ifn,lr-*ifn+1);
			*ifn=t;
			continue;
		case '|':
			ch=0;
			num++;
		}
		*lw++=ch;
	}
	*lw=0;
	return num;
}

void DOS_Shell::ParseLine(char * line) {
	LOG(LOG_EXEC,LOG_ERROR)("Parsing command line: %s",line);
	/* Check for a leading @ */
 	if (line[0] == '@') line[0] = ' ';
	line = trim(line);

	/* Do redirection and pipe checks */

	char * in  = 0;
	char * out = 0;

	Bit16u dummy,dummy2;
	Bit32u bigdummy = 0;
	Bitu num = 0;		/* Number of commands in this line */
	bool append;
	bool normalstdin  = false;	/* wether stdin/out are open on start. */
	bool normalstdout = false;	/* Bug: Assumed is they are "con"      */

	num = GetRedirection(line,&in, &out,&append);
	if (num>1) LOG_MSG("SHELL: Multiple command on 1 line not supported");
	if (in || out) {
		normalstdin  = (psp->GetFileHandle(0) != 0xff);
		normalstdout = (psp->GetFileHandle(1) != 0xff);
	}
	if (in) {
		if(DOS_OpenFile(in,OPEN_READ,&dummy)) {	//Test if file exists
			DOS_CloseFile(dummy);
			LOG_MSG("SHELL: Redirect input from %s",in);
			if(normalstdin) DOS_CloseFile(0);	//Close stdin
			DOS_OpenFile(in,OPEN_READ,&dummy);	//Open new stdin
		}
	}
	if (out){
		LOG_MSG("SHELL: Redirect output to %s",out);
		if(normalstdout) DOS_CloseFile(1);
		if(!normalstdin && !in) DOS_OpenFile("con",OPEN_READWRITE,&dummy);
		bool status = true;
		/* Create if not exist. Open if exist. Both in read/write mode */
		if(append) {
			if( (status = DOS_OpenFile(out,OPEN_READWRITE,&dummy)) ) {
				 DOS_SeekFile(1,&bigdummy,DOS_SEEK_END);
			} else {
				status = DOS_CreateFile(out,DOS_ATTR_ARCHIVE,&dummy);	//Create if not exists.
			}
		} else {
			status = DOS_OpenFileExtended(out,OPEN_READWRITE,DOS_ATTR_ARCHIVE,0x12,&dummy,&dummy2);
		}

		if(!status && normalstdout) DOS_OpenFile("con",OPEN_READWRITE,&dummy); //Read only file, open con again
		if(!normalstdin && !in) DOS_CloseFile(0);
	}
	/* Run the actual command */
	DoCommand(line);
	/* Restore handles */
	if(in) {
		DOS_CloseFile(0);
		if(normalstdin) DOS_OpenFile("con",OPEN_READWRITE,&dummy);
		free(in);
	}
	if(out) {
		DOS_CloseFile(1);
		if(!normalstdin) DOS_OpenFile("con",OPEN_READWRITE,&dummy);
		if(normalstdout) DOS_OpenFile("con",OPEN_READWRITE,&dummy);
		if(!normalstdin) DOS_CloseFile(0);
		free(out);
	}
}



void DOS_Shell::RunInternal(void) {
	char input_line[CMD_MAXLINE] = {0};
	while (bf) {
		if (bf->ReadLine(input_line)) {
			if (echo) {
				if (input_line[0] != '@') {
					ShowPrompt();
					WriteOut_NoParsing(input_line);
					WriteOut_NoParsing("\n");
				}
			}
			ParseLine(input_line);
			if (echo) WriteOut_NoParsing("\n");
		}
	}
}

void DOS_Shell::Run(void) {
	char input_line[CMD_MAXLINE] = {0};
	std::string line;
	if (cmd->FindStringRemainBegin("/C",line)) {
		strcpy(input_line,line.c_str());
		char* sep = strpbrk(input_line,"\r\n"); //GTA installer
		if (sep) *sep = 0;
		DOS_Shell temp;
		temp.echo = echo;
		temp.ParseLine(input_line);		//for *.exe *.com  |*.bat creates the bf needed by runinternal;
		temp.RunInternal();				// exits when no bf is found.
		return;
	}
	/* Start a normal shell and check for a first command init */
	if (cmd->FindString("/INIT",line,true)) {
		WriteOut(MSG_Get("SHELL_STARTUP_BEGIN"),VERSION,DOSBOXREVISION);
#if C_DEBUG
		WriteOut(MSG_Get("SHELL_STARTUP_DEBUG"));
#endif
		if (machine == MCH_CGA) {
			WriteOut(MSG_Get("SHELL_STARTUP_CGA"));
			
		} else if (machine == MCH_HERC) {
			WriteOut(MSG_Get("SHELL_STARTUP_HERC"));
			
		} else if (machine == MCH_PCJR){
			WriteOut(MSG_Get("SHELL_STARTUP_PCJR"));	
			
		} else if (machine  == MCH_TANDY      ||
			 machine  == MCH_EGA	    ||
			 svgaCard == SVGA_S3Trio    ||		
			 svgaCard == SVGA_TsengET4K ||
			 svgaCard == SVGA_TsengET3K ||
			 svgaCard == SVGA_ParadisePVGA1A||			 
			 svgaCard == SVGA_None) {
			WriteOut(MSG_Get("SHELL_STARTUP_BEGIN_DEFAULT"));
			WriteOut(MSG_Get("SHELL_STARTUP_END"));
		}
		WriteOut(MSG_Get("SHELL_STARTUP_END_DEFAULT"));

		strcpy(input_line,line.c_str());
		line.erase();
		ParseLine(input_line);
	} else {
		WriteOut(MSG_Get("SHELL_STARTUP_SUB"),VERSION,DOSBOXREVISION);
	}
	do {
		if (bf){
			if(bf->ReadLine(input_line)) {
				if (echo) {
					if (input_line[0]!='@') {
						ShowPrompt();
						WriteOut_NoParsing(input_line);
						WriteOut_NoParsing("\n");
					};
				};
				ParseLine(input_line);
				if (echo) WriteOut("\n");
			}
		} else {
			if (echo) ShowPrompt();
			InputCommand(input_line);
			ParseLine(input_line);
			if (echo && !bf) WriteOut_NoParsing("\n");
		}
	} while (!exit);
}

void DOS_Shell::SyntaxError(void) {
	WriteOut(MSG_Get("SHELL_SYNTAXERROR"));
}

class AUTOEXEC:public Module_base {
private:
	AutoexecObject autoexec[17];
	AutoexecObject autoexec_echo;
public:
	AUTOEXEC(Section* configuration):Module_base(configuration) {
		/* Register a virtual AUOEXEC.BAT file */
		std::string line;
		Section_line * section=static_cast<Section_line *>(configuration);

		/* Check -securemode switch to disable mount/imgmount/boot after running autoexec.bat */
		bool secure = control->opt_securemode;

		/* add stuff from the configfile unless -noautexec or -securemode is specified. */
		char * extra = const_cast<char*>(section->data.c_str());
		if (extra && !secure && !control->opt_noautoexec) {
			/* detect if "echo off" is the first line */
			bool echo_off  = !strncasecmp(extra,"echo off",8);
			if (!echo_off) echo_off = !strncasecmp(extra,"@echo off",9);

			/* if "echo off" add it to the front of autoexec.bat */
			if(echo_off) autoexec_echo.InstallBefore("@echo off");

			/* Install the stuff from the configfile */
			autoexec[0].Install(section->data);
		}

		/* Check to see for extra command line options to be added (before the command specified on commandline) */
		/* Maximum of extra commands: 10 */
		Bitu i = 1;
		for (auto it=control->opt_c.begin();i <= 11 && it!=control->opt_c.end();it++) /* -c switches */
			autoexec[i++].Install(*it);

		/* Check for the -exit switch which causes dosbox to when the command on the commandline has finished */
		bool addexit = control->opt_exit;

#if 0/*FIXME: This is ugly. I don't care to follow through on this nonsense for now. When needed, port to new command line switching. */
		/* Check for first command being a directory or file */
		char buffer[CROSS_LEN];
		char orig[CROSS_LEN];
		char cross_filesplit[2] = {CROSS_FILESPLIT , 0};
		/* Combining -securemode and no parameter leaves you with a lovely Z:\. */ 
		if ( !control->cmdline->FindCommand(1,line) ) { 
			if ( secure ) autoexec[12].Install("z:\\config.com -securemode");
		} else {
			if (line.find(':',((line[0]|0x20) >= 'a' && (line[0]|0x20) <= 'z')?2:0) != std::string::npos) {
				/* a physfs source */
				autoexec[12].Install(std::string("MOUNT C \"") + line + std::string("\""));
				autoexec[13].Install("C:");
				if(secure) autoexec[14].Install("z:\\config.com -securemode");
				goto nomount;
			}

			struct stat test;
			strcpy(buffer,line.c_str());
			if (stat(buffer,&test)){
				getcwd(buffer,CROSS_LEN);
				strcat(buffer,cross_filesplit);
				strcat(buffer,line.c_str());
				if (stat(buffer,&test)) goto nomount;
			}
			if (test.st_mode & S_IFDIR) { 
				autoexec[12].Install(std::string("MOUNT C \"") + buffer + "\"");
				autoexec[13].Install("C:");
				if(secure) autoexec[14].Install("z:\\config.com -securemode");
			} else {
				char* name = strrchr(buffer,CROSS_FILESPLIT);
				if (!name) { //Only a filename 
					line = buffer;
					getcwd(buffer,CROSS_LEN);
					strcat(buffer,cross_filesplit);
					strcat(buffer,line.c_str());
					if(stat(buffer,&test)) goto nomount;
					name = strrchr(buffer,CROSS_FILESPLIT);
					if(!name) goto nomount;
				}
				*name++ = 0;
				if (access(buffer,F_OK)) goto nomount;
				upcase(name);
				autoexec[12].Install(std::string("MOUNT C \"") + buffer + "\"");
				autoexec[13].Install("C:");
				/* Save the non-modified filename (so boot and imgmount can use it (long filenames, case sensivitive)) */
				strcpy(orig,name);
				if(strstr(name,".BAT") != 0) {
					if(secure) autoexec[14].Install("z:\\config.com -securemode");
					/* BATch files are called else exit will not work */
					autoexec[15].Install(std::string("CALL ") + name);
					if(addexit) autoexec[16].Install("exit");
				} else if((strstr(name,".IMG") != 0) || (strstr(name,".IMA") !=0 )) {
					//No secure mode here as boot is destructive and enabling securemode disables boot
					/* Boot image files */
					autoexec[15].Install(std::string("BOOT ") + orig);
				} else if((strstr(name,".ISO") != 0) || (strstr(name,".CUE") !=0 )) {
					/* imgmount CD image files */
					/* securemode gets a different number from the previous branches! */
					autoexec[14].Install(std::string("IMGMOUNT D \"") + orig + std::string("\" -t iso"));
					//autoexec[16].Install("D:");
					if(secure) autoexec[15].Install("z:\\config.com -securemode");
					/* Makes no sense to exit here */
				} else {
					if(secure) autoexec[14].Install("z:\\config.com -securemode");
					autoexec[15].Install(name);
					if(addexit) autoexec[16].Install("exit");
				}
			}
		}
nomount:
#endif

		if (addexit) autoexec[i++].Install("exit");

		assert(i <= 17); /* FIXME: autoexec[] should not be fixed size */

		VFILE_Register("AUTOEXEC.BAT",(Bit8u *)autoexec_data,(Bit32u)strlen(autoexec_data));
	}
};

static AUTOEXEC* test;

void AUTOEXEC_Init(Section * sec) {
	test = new AUTOEXEC(sec);
}

static Bitu INT2E_Handler(void) {
	/* Save return address and current process */
	RealPt save_ret=real_readd(SegValue(ss),reg_sp);
	Bit16u save_psp=dos.psp();

	/* Set first shell as process and copy command */
	dos.psp(DOS_FIRST_SHELL);
	DOS_PSP psp(DOS_FIRST_SHELL);
	psp.SetCommandTail(RealMakeSeg(ds,reg_si));
	SegSet16(ss,RealSeg(psp.GetStack()));
	reg_sp=2046;

	/* Read and fix up command string */
	CommandTail tail;
	MEM_BlockRead(PhysMake(dos.psp(),128),&tail,128);
	if (tail.count<127) tail.buffer[tail.count]=0;
	else tail.buffer[126]=0;
	char* crlf=strpbrk(tail.buffer,"\r\n");
	if (crlf) *crlf=0;

	/* Execute command */
	if (strlen(tail.buffer)) {
		DOS_Shell temp;
		temp.ParseLine(tail.buffer);
		temp.RunInternal();
	}

	/* Restore process and "return" to caller */
	dos.psp(save_psp);
	SegSet16(cs,RealSeg(save_ret));
	reg_ip=RealOff(save_ret);
	reg_ax=0;
	return CBRET_NONE;
}

static char const * const path_string="PATH=Z:\\";
static char const * const comspec_string="COMSPEC=Z:\\COMMAND.COM";
static char const * const prompt_string="PROMPT=$P$G";
static char const * const full_name="Z:\\COMMAND.COM";
static char const * const init_line="/INIT AUTOEXEC.BAT";

void SHELL_Init() {
	/* Add messages */
	MSG_Add("SHELL_CMD_VOL_DRIVE","\n Volume in drive %c ");
	MSG_Add("SHELL_CMD_VOL_DRIVEERROR","Cannot find the drive specified\n");
	MSG_Add("SHELL_CMD_VOL_SERIAL"," Volume Serial Number is ");
	MSG_Add("SHELL_CMD_VOL_SERIAL_NOLABEL","has no label\n");
	MSG_Add("SHELL_CMD_VOL_SERIAL_LABEL","is %s\n");
	MSG_Add("SHELL_ILLEGAL_PATH","Illegal Path.\n");
	MSG_Add("SHELL_CMD_HELP","If you want a list of all supported commands type \033[33;1mhelp /all\033[0m .\nA short list of the most often used commands:\n");
	MSG_Add("SHELL_CMD_ECHO_ON","ECHO is on.\n");
	MSG_Add("SHELL_CMD_ECHO_OFF","ECHO is off.\n");
	MSG_Add("SHELL_ILLEGAL_SWITCH","Illegal switch: %s.\n");
	MSG_Add("SHELL_MISSING_PARAMETER","Required parameter missing.\n");
	MSG_Add("SHELL_CMD_CHDIR_ERROR","Unable to change to: %s.\n");
	MSG_Add("SHELL_CMD_CHDIR_HINT","Hint: To change to different drive type \033[31m%c:\033[0m\n");
	MSG_Add("SHELL_CMD_CHDIR_HINT_2","directoryname is longer than 8 characters and/or contains spaces.\nTry \033[31mcd %s\033[0m\n");
	MSG_Add("SHELL_CMD_CHDIR_HINT_3","You are still on drive Z:, change to a mounted drive with \033[31mC:\033[0m.\n");
	MSG_Add("SHELL_CMD_DATE_HELP","Displays or changes the internal date.\n");
	MSG_Add("SHELL_CMD_DATE_ERROR","The specified date is not correct.\n");
	MSG_Add("SHELL_CMD_DATE_DAYS","3SunMonTueWedThuFriSat"); // "2SoMoDiMiDoFrSa"
	MSG_Add("SHELL_CMD_DATE_NOW","Current date: ");
	MSG_Add("SHELL_CMD_DATE_SETHLP","Type 'date MM-DD-YYYY' to change.\n");
	MSG_Add("SHELL_CMD_DATE_FORMAT","M/D/Y");
	MSG_Add("SHELL_CMD_DATE_HELP_LONG","DATE [[/T] [/H] [/S] | MM-DD-YYYY]\n"\
									"  MM-DD-YYYY: new date to set\n"\
									"  /S:         Permanently use host time and date as DOS time\n"\
                                    "  /F:         Switch back to DOSBox internal time (opposite of /S)\n"\
									"  /T:         Only display date\n"\
									"  /H:         Synchronize with host\n");
	MSG_Add("SHELL_CMD_TIME_HELP","Displays the internal time.\n");
	MSG_Add("SHELL_CMD_TIME_NOW","Current time: ");
	MSG_Add("SHELL_CMD_TIME_HELP_LONG","TIME [/T] [/H]\n"\
									"  /T:         Display simple time\n"\
									"  /H:         Synchronize with host\n");
	MSG_Add("SHELL_CMD_MKDIR_ERROR","Unable to make: %s.\n");
	MSG_Add("SHELL_CMD_RMDIR_ERROR","Unable to remove: %s.\n");
	MSG_Add("SHELL_CMD_DEL_ERROR","Unable to delete: %s.\n");
	MSG_Add("SHELL_CMD_DEL_SUCCE","\tDeleted: %8s.\n");	
	MSG_Add("SHELL_CMD_DEL_NOARG","Missing arguments.\n");	
	MSG_Add("SHELL_CMD_DEL_WILDFULL","DELETE ALL FILES - ");	
	MSG_Add("SHELL_CMD_DEL_WILDHALF","DELETE ALL FILES WITH %s - ");	
	MSG_Add("SHELL_CMD_DEL_CHECK","Args Len %d - ");	
	MSG_Add("SHELL_CMD_DEL_SURE","Are you sure [Y,N]?\n");	
	MSG_Add("SHELL_SYNTAXERROR","The syntax of the command is incorrect.\n");
	MSG_Add("SHELL_CMD_SET_NOT_SET","Environment variable %s not defined.\n");
	MSG_Add("SHELL_CMD_SET_OUT_OF_SPACE","Not enough environment space left.\n");
	MSG_Add("SHELL_CMD_IF_EXIST_MISSING_FILENAME","IF EXIST: Missing filename.\n");
	MSG_Add("SHELL_CMD_IF_ERRORLEVEL_MISSING_NUMBER","IF ERRORLEVEL: Missing number.\n");
	MSG_Add("SHELL_CMD_IF_ERRORLEVEL_INVALID_NUMBER","IF ERRORLEVEL: Invalid number.\n");
	MSG_Add("SHELL_CMD_GOTO_MISSING_LABEL","No label supplied to GOTO command.\n");
	MSG_Add("SHELL_CMD_GOTO_LABEL_NOT_FOUND","GOTO: Label %s not found.\n");
	MSG_Add("SHELL_CMD_FILE_NOT_FOUND","File %s not found.\n");
	MSG_Add("SHELL_CMD_FILE_EXISTS","File %s already exists.\n");
	MSG_Add("SHELL_CMD_DIR_INTRO"," Directory of %s.\n\n");
	MSG_Add("SHELL_CMD_DIR_BYTES_USED","%5d File(s) %17s Bytes.\n");
	MSG_Add("SHELL_CMD_DIR_BYTES_FREE","%5d Dir(s)  %17s Bytes free.\n");
	MSG_Add("SHELL_EXECUTE_DRIVE_NOT_FOUND","Drive %c does not exist!\nYou must \033[31mmount\033[0m it first. Type \033[1;33mintro\033[0m or \033[1;33mintro mount\033[0m for more information.\n");
	MSG_Add("SHELL_EXECUTE_ILLEGAL_COMMAND","Illegal command: %s.\n");
	MSG_Add("SHELL_CMD_PAUSE","Press any key to continue.\n");
	MSG_Add("SHELL_CMD_PAUSE_HELP","Waits for 1 keystroke to continue.\n");
	MSG_Add("SHELL_CMD_COPY_FAILURE","Copy failure : %s.\n");
	MSG_Add("SHELL_CMD_COPY_SUCCESS","   %d File(s) copied.\n");
	MSG_Add("SHELL_CMD_MOVE_FAILURE","Move failure : %s.\n");
	MSG_Add("SHELL_CMD_MOVE_SUCCESS","   %d File(s) moved.\n");	
	MSG_Add("SHELL_CMD_SUBST_NO_REMOVE","Unable to remove, drive not in use.\n");
	MSG_Add("SHELL_CMD_SUBST_FAILURE","SUBST failed. You either made an error in your commandline or the target drive is already used.\nIt's only possible to use SUBST on Local drives\n");

	MSG_Add("SHELL_STARTUP_BEGIN",
		"\033[44;1m\xC9\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD"
		"\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD"
		"\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xBB\n"
		"\xBA \033[32mWelcome to DOSBox %-8s                       %s\033[37m \xBA\n"
		"\xBA                                                                    \xBA\n"	
	);	
	MSG_Add("SHELL_STARTUP_BEGIN_DEFAULT",
		"\xBA                                                                    \xBA\n"
//		"\xBA DOSBox runs real and protected mode games.                         \xBA\n"
		"\xBA For a short introduction for new users type: \033[33mINTRO\033[37m                 \xBA\n"
		"\xBA For supported shell commands type: \033[33mHELP\033[37m                            \xBA\n"
		"\xBA                                                                    \xBA\n"
		"\xBA To adjust the emulated CPU speed, use \033[31mctrl-F11\033[37m and \033[31mctrl-F12\033[37m.       \xBA\n"
		"\xBA To activate the keymapper \033[31mctrl-F1\033[37m.                                 \xBA\n"
		"\xBA For more information read the \033[36mREADME\033[37m file in the DOSBox directory. \xBA\n"
		"\xBA                                                                    \xBA\n"
	);
	if (!mono_cga) {
		MSG_Add("SHELL_STARTUP_CGA",
		"\xBA DOSBox supports Composite CGA mode.                                \xBA\n"
	    "\xBA Use \033[31mF12\033[37m to set composite output ON, OFF, or AUTO (default).        \xBA\n"
		"\xBA \033[31m(Alt-)F11\033[37m changes hue; \033[31mctrl-alt-F11\033[37m selects early/late CGA model.  \xBA\n"
		"\xBA                                                                    \xBA\n"
		);
	} else {
		MSG_Add("SHELL_STARTUP_CGA",
		"\xBA Use \033[31mF11\033[37m to cycle through green, amber, white and paper-white mode, \xBA\n"
		"\xBA and \033[31mAlt-F11\033[37m to change contrast/brightness settings.                \xBA\n"
		);
	}
	MSG_Add("SHELL_STARTUP_HERC",
		"\xBA Use \033[31mF11\033[37m to cycle through white, amber, paper-white and green mode. \xBA\n"
	    "\xBA                                                                    \xBA\n"
		"\xBA Use alt-F11 to toggle horizontal blending (only in graphics mode). \xBA\n"		
	    "\xBA                                                                    \xBA\n"			
	);
	MSG_Add("SHELL_STARTUP_PCJR","\xBA DOSBox supports Composite PCjr mode.                               \xBA\n"
	        "\xBA Use \033[31mF12\033[37m to set composite output ON, OFF, or AUTO (default).        \xBA\n"
	        "\xBA \033[31m(Alt-)F11\033[37m changes hue.                                             \xBA\n"
	        "\xBA                                                                    \xBA\n"
	);	
	MSG_Add("SHELL_STARTUP_DEBUG",
	        "\xBA Press \033[31malt-Pause\033[37m to enter the debugger or start the exe with \033[33mDEBUG\033[37m. \xBA\n"
	        "\xBA                                                                    \xBA\n"
	);
	MSG_Add("SHELL_STARTUP_END",
	        "\xBA \033[32mHAVE FUN!\033[37m                                                          \xBA\n"
	        "\xBA \033[32mThe DOSBox Team \033[33mhttp://www.dosbox.com\033[37m                              \xBA\n"
	        //"\n" //Breaks the startup message if you type a mount and a drive change.
	);
	MSG_Add("SHELL_STARTUP_END_DEFAULT",
	        "\xC8\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD"	
	        "\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD"
	        "\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xCD\xBC\033[0m\n"
	        //"\n" //Breaks the startup message if you type a mount and a drive change.
	);	
	MSG_Add("SHELL_STARTUP_SUB","\n\n\033[32;1mDOSBox %s %s Command Shell\033[0m\n\n");
	MSG_Add("SHELL_CMD_CHDIR_HELP","Displays/changes the current directory.\n");
	MSG_Add("SHELL_CMD_CHDIR_HELP_LONG","CHDIR [drive:][path]\n"
	        "CHDIR [..]\n"
	        "CD [drive:][path]\n"
	        "CD [..]\n\n"
	        "  ..   Specifies that you want to change to the parent directory.\n\n"
	        "Type CD drive: to display the current directory in the specified drive.\n"
	        "Type CD without parameters to display the current drive and directory.\n");
	MSG_Add("SHELL_CMD_CLS_HELP","Clear screen.\n");
	MSG_Add("SHELL_CMD_DIR_HELP","Directory View.\n");
	MSG_Add("SHELL_CMD_DIR_HELP_LONG","DIR [drive:][path][filename] [/W] [/S] [/P] [/B] [/AD] [/O[Sort Order]\n\n"
		   "   [drive:][path][filename]\n"
		   "       Specifies drive, directory, and/or files to list.\n\n"
		   "   /W\tUses wide list format.\n"
		   "   /S\tDisplays files in specified directory and all subdirectories.\n\t(not supported)\n"
		   "   /P\tPauses after each screenful of information.\n"
		   "   /B\tUses bare format (no heading information or summary).\n"
		   "   /AD\tDisplays directories.\n\n"
		   "   List by files in sorted order. /O[Switch]\n"
		   "   N\tBy name (alphabetic)           S  By size (smallest first)\n"
		   "   E\tBy extension (alphabetic)      D  By date/time (oldest first)\n"
		   "   -\tPrefix to reverse order");	
	MSG_Add("SHELL_CMD_ECHO_HELP","Display messages and enable/disable command echoing.\n");
	MSG_Add("SHELL_CMD_EXIT_HELP","Exit from the shell.\n");
	MSG_Add("SHELL_CMD_HELP_HELP","Show help.\n");
	MSG_Add("SHELL_CMD_HELP_HELP_LONG","HELP [command]\n");	
	MSG_Add("SHELL_CMD_MKDIR_HELP","Make Directory.\n");
	MSG_Add("SHELL_CMD_MKDIR_HELP_LONG","MKDIR [drive:][path]\n"
	        "MD [drive:][path]\n");
	MSG_Add("SHELL_CMD_RMDIR_HELP","Remove Directory.\n");
	MSG_Add("SHELL_CMD_RMDIR_HELP_LONG","RMDIR [drive:][path]\n"
	        "RD [drive:][path]\n");
	MSG_Add("SHELL_CMD_SET_HELP","Change environment variables.\n");
	MSG_Add("SHELL_CMD_SET_HELP_LONG","SET [variable=[string]]\n\n"
		   "   variable\tSpecifies the environment-variable name.\n"
		   "   string\tSpecifies a series of characters to assign to the variable.\n\n"
		   "* If no string is specified, the variable is removed from the environment.\n\n"
		   "Type SET without parameters to display the current environment variables.\n");	
	MSG_Add("SHELL_CMD_IF_HELP","Performs conditional processing in batch programs.\n");
	MSG_Add("SHELL_CMD_IF_HELP_LONG","IF [NOT] ERRORLEVEL number command\n"
		   "IF [NOT] string1==string2 command\n"
		   "IF [NOT] EXIST filename command\n\n"
		   "  NOT               Specifies that DOS should carry out\n"
		   "                    the command only if the condition is false.\n\n"
		   "  ERRORLEVEL number Specifies a true condition if the last program run\n"
		   "                    returned an exit code equal to or greater than the number\n"
		   "                    specified.\n\n"
		   "  string1==string2  Specifies a true condition if the specified text strings\n"
		   "                    match.\n\n"
		   "  EXIST filename    Specifies a true condition if the specified filename\n"
		   "                    exists.\n\n"
		   "  command           Specifies the command to carry out if the condition is\n"
		   "                    met.  Command can be followed by ELSE command which\n"
		   "                    will execute the command after the ELSE keyword if the\n"
		   "                    specified condition is FALSE\n");	
	MSG_Add("SHELL_CMD_GOTO_HELP","Jump to a labeled line in a batch script.\n");
	MSG_Add("SHELL_CMD_GOTO_HELP_LONG","GOTO label\n\n"
		   "   label   Specifies a text string used in the batch program as a label.\n\n"
		   "You type a label on a line by itself, beginning with a colon.\n");	
	MSG_Add("SHELL_CMD_SHIFT_HELP","Leftshift commandline parameters in a batch script.\n");
	MSG_Add("SHELL_CMD_TYPE_HELP","Display the contents of a text-file.\n");
	MSG_Add("SHELL_CMD_TYPE_HELP_LONG","TYPE [drive:][path][filename]\n");
	MSG_Add("SHELL_CMD_REM_HELP","Add comments in a batch file.\n");
	MSG_Add("SHELL_CMD_REM_HELP_LONG","REM [comment]\n");
	MSG_Add("SHELL_CMD_NO_WILD","This is a simple version of the command, no wildcards allowed!\n");
	MSG_Add("SHELL_CMD_RENAME_HELP","Renames one or more files.\n");
	MSG_Add("SHELL_CMD_RENAME_HELP_LONG","RENAME [drive:][path]filename1 filename2.\n"
	        "REN [drive:][path]filename1 filename2.\n\n"
	        "Note that you can not specify a new drive or path for your destination file.\n");
	MSG_Add("SHELL_CMD_DELETE_HELP","Removes one or more files.\n");
	MSG_Add("SHELL_CMD_DELETE_HELP_LONG","DEL [/P] [/Q] names\n"
		   "ERASE [/P] [/Q] names\n\n"
		   "  names\t\tSpecifies a list of one or more files or directories.\n"
		   "\t\tWildcards may be used to delete multiple files. If a\n"
		   "\t\tdirectory is specified, all files within the directory\n"
		   "\t\twill be deleted.\n"
		   "  /P\t\tPrompts for confirmation before deleting one or more files.\n"
		   "  /Q\t\tQuiet mode, do not ask if ok to delete on global wildcard\n");	
	MSG_Add("SHELL_CMD_COPY_HELP","Copy files.\n");
	MSG_Add("SHELL_CMD_COPY_HELP_LONG","COPY [/B] [/-Y] source[+source[+...]] [destination]\n\n"
		   "  source\tSpecifies the file(s) to be copied.\n"
		   "  destination\tSpecifies the directory and/or filename for the new file.\n"
		   "  /B\t\tSpecify that the file(s) are binary. (Default)\n"
		   "  /-Y\t\tDon't ask for confirmation when overwriting files. (Default)\n");	
	MSG_Add("SHELL_CMD_CALL_HELP","Start a batch file from within another batch file.\n");
	MSG_Add("SHELL_CMD_CALL_HELP_LONG","CALL [drive:][path]filename [batch-parameters]\n\n"
		   "batch-parameters   Specifies any command-line information required by\n"
		   "                   the batch program.\n");	
	MSG_Add("SHELL_CMD_SUBST_HELP","Assign an internal directory to a drive.\n");
	MSG_Add("SHELL_CMD_LOADHIGH_HELP","Loads a program into upper memory (requires xms=true,umb=true).\n");
	MSG_Add("SHELL_CMD_CHOICE_HELP","Waits for a keypress and sets ERRORLEVEL.\n");
	MSG_Add("SHELL_CMD_CHOICE_HELP_LONG","CHOICE [/C:choices] [/N] [/S] text\n"
	        "  /C[:]choices  -  Specifies allowable keys.  Default is: yn.\n"
	        "  /N  -  Do not display the choices at end of prompt.\n"
	        "  /S  -  Enables case-sensitive choices to be selected.\n"
	        "  text  -  The text to display as a prompt.\n");
	MSG_Add("SHELL_CMD_ATTRIB_HELP","Does nothing. Provided for compatibility.\n");
	MSG_Add("SHELL_CMD_PATH_HELP","Displays/Sets a search path for executable files.\n");
	MSG_Add("SHELL_CMD_PATH_HELP_LONG","PATH [[drive:]path[;...][;%PATH%]\n"
		   "PATH ;\n\n"
		   "Type PATH ; to clear all search path settings.\n"
	   	   "Type PATH without parameters to display the current path.\n");
	MSG_Add("SHELL_CMD_VER_HELP","View and set the reported DOS version.\n");
	MSG_Add("SHELL_CMD_VER_HELP_LONG","VER\n" 
		   "VER SET [number]\n\n" 
		   "  number   Set the reported DOS version. (e.g. VER 5 1)\n\n" 
		   "Type VER without parameters to display the current DOS version.\n");		
	MSG_Add("SHELL_CMD_VERO_HELP","View Dosbox (Optionls) Info\n");		   
	MSG_Add("SHELL_CMD_VER_VER","DOSBox version %s. Reported DOS version %d.%02d.\n");
	MSG_Add("SHELL_CMD_ADDKEY_HELP","Generates artificial keypresses.\n");
	MSG_Add("SHELL_CMD_MOVE_HELP","Moves files and renames files and directories.\n");
	MSG_Add("SHELL_CMD_MOVE_HELP_LONG","MOVE [drive:][path]filename1[,...] destination\n");
	MSG_Add("SHELL_CMD_VOL_HELP","Displays the disk volume label and serial number, if they exist.\n");
	MSG_Add("SHELL_CMD_VOL_HELP_LONG","VOL [drive]\n");
	MSG_Add("SHELL_CMD_TIME_HELP","Displays the time.\n");
	MSG_Add("SHELL_CMD_DATE_HELP","Displays/Sets the date.\n");
	MSG_Add("SHELL_CMD_DATE_HELP_LONG","DATE\nDATE [day] [month] [year]\n");
	MSG_Add("SHELL_CMD_PROMPT_NOARG","Prompt is now default. For prompt help, type 'PROMPT /?'\n");
	MSG_Add("SHELL_CMD_PROMPT_HELP","\033[32mChange the command prompt.\033[37m \n");
	MSG_Add("SHELL_CMD_PROMPT_HELP_LONG","\033[36mPROMPT [text]\033[37m Specifies a text to prompt ( eq: PROMPT mytext )\n"
		   "\033[36mPROMPT [code]\033[37m SET PROMPT=[sign,sign,...] ( eq: SET PROMPT=$E[7m$N:$E[m )\n" 
		   "\033[32mCharacters and the following special codes:\033[37m\n"
		   "\033[36m  $A \033[37m  &  Ampersand                    / Und-Zeichen\n"		   
		   "\033[36m  $Q \033[37m  =  Equal Sign                   / Gleichheitszeichen\n"	
		   "\033[36m  $$ \033[37m  $  Dollar Sign                  / Dollar Zeichen\n"		
		   "\033[36m  $B \033[37m  |  Pipe                         / Verkettungszeichen\n"
		   "\033[36m  $G \033[37m  >  Greater-than Sign            / Groesser Als Zeichen\n"
		   "\033[36m  $L \033[37m  <  Less-than sign               / Kleiner Als Zeichen\n"
		   "\033[36m  $C \033[37m  (  Left parenthesis             / Linkes KLammerzeichen\n"		   
		   "\033[36m  $F \033[37m  )  Right parenthesis            / Rechtes Klammerzeichen\n"	
	       "\033[36m  $S \033[37m  Space                           / Leerzeichen\n"			   
		   "\033[36m  $T \033[37m  Current Time                    / Aktuelle Uhrzeit\n"
		   "\033[36m  $D \033[37m  Current Date                    / Aktuelles Datum\n"
		   "\033[36m  $P \033[37m  Current Drive & Path            / Aktuelles Laufwerk & Pfad\n"
		   "\033[36m  $V \033[37m  DOS Version                     / MS-DOS Versions Nummer\n"	
		   "\033[36m  $Z \033[37m  DOSBox Version                  / DOSBox Versions Nummer\n"
		   "\033[36m  $N \033[37m  Current Drive                   / Aktuelles Laufwerk\n"
		   "\033[36m  $_ \033[37m  Carriage Return, Lienfeed       / Wagenruecklauf, neue Zeile\n"	
		   "\033[36m  $H \033[37m  Backspace (Del Previous Char)   / Rueckschritt (Loescht voriges Zeichen)\n"		   
		   "\033[36m  $E \033[37m  ASCII Escape Code (Code 27)     / ASCII Escape Code (Code 27)"
		   );
	MSG_Add("SHELL_CMD_LABEL_HELP","Creates or changes the volume label of the Current disk.\n");
	MSG_Add("SHELL_CMD_LABEL_HELP_LONG","LABEL [name]\n\n\tname\t\tSpecifies the Name for the current disk.\n");
	MSG_Add("SHELL_CMD_MORE_HELP","Displays output one screen at a time.\n");
	MSG_Add("SHELL_CMD_MORE_HELP_LONG","MORE [filename]\n");
	MSG_Add("SHELL_CMD_MOUSECAP_HELP","Toggle Command. Capture / Release the Host Mouse.\n");

	/* Regular startup */
	call_shellstop=CALLBACK_Allocate();
	/* Setup the startup CS:IP to kill the last running machine when exitted */
	RealPt newcsip=CALLBACK_RealPointer(call_shellstop);
	SegSet16(cs,RealSeg(newcsip));
	reg_ip=RealOff(newcsip);

	CALLBACK_Setup(call_shellstop,shellstop_handler,CB_IRET,"shell stop");
	PROGRAMS_MakeFile("COMMAND.COM",SHELL_ProgramStart);

	/* Now call up the shell for the first time */
	Bit16u psp_seg=DOS_FIRST_SHELL;
	Bit16u env_seg=DOS_FIRST_SHELL+19; //DOS_GetMemory(1+(4096/16))+1;
	Bit16u stack_seg=DOS_GetMemory(2048/16);
	SegSet16(ss,stack_seg);
	reg_sp=2046;

	/* Set up int 24 and psp (Telarium games) */
	real_writeb(psp_seg+16+1,0,0xea);		/* far jmp */
	real_writed(psp_seg+16+1,1,real_readd(0,0x24*4));
	real_writed(0,0x24*4,((Bit32u)psp_seg<<16) | ((16+1)<<4));

	/* Set up int 23 to "int 20" in the psp. Fixes what.exe */
	real_writed(0,0x23*4,((Bit32u)psp_seg<<16));

	/* Set up int 2e handler */
	Bitu call_int2e=CALLBACK_Allocate();
	RealPt addr_int2e=RealMake(psp_seg+16+1,8);
	CALLBACK_Setup(call_int2e,&INT2E_Handler,CB_IRET_STI,Real2Phys(addr_int2e),"Shell Int 2e");
	RealSetVec(0x2e,addr_int2e);

	/* Setup MCBs */
	DOS_MCB pspmcb((Bit16u)(psp_seg-1));
	pspmcb.SetPSPSeg(psp_seg);	// MCB of the command shell psp
	pspmcb.SetSize(0x10+2);
	pspmcb.SetType(0x4d);
	DOS_MCB envmcb((Bit16u)(env_seg-1));
	envmcb.SetPSPSeg(psp_seg);	// MCB of the command shell environment
	envmcb.SetSize(DOS_MEM_START-env_seg);
	envmcb.SetType(0x4d);

	/* Setup environment */
	PhysPt env_write=PhysMake(env_seg,0);
	MEM_BlockWrite(env_write,path_string,(Bitu)(strlen(path_string)+1));
	env_write += (PhysPt)(strlen(path_string)+1);
	MEM_BlockWrite(env_write,comspec_string,(Bitu)(strlen(comspec_string)+1));
	env_write += (PhysPt)(strlen(comspec_string)+1);
	MEM_BlockWrite(env_write,prompt_string,(Bitu)(strlen(prompt_string)+1));
	env_write += (PhysPt)(strlen(prompt_string)+1);

	
	mem_writeb(env_write++,0);
	mem_writew(env_write,1);
	env_write+=2;
	MEM_BlockWrite(env_write,full_name,(Bitu)(strlen(full_name)+1));

	extern bool Mouse_Drv;
	Mouse_Drv = true;
	
	//  #181 28.com/50.com & config.sys commands
	// Added DEVICE.COM, BUFFERS.COM, FCBS.COM, FILES.COM, LASTDRIV.COM, also.
	Bit8u some_data_28[8] = { 0xB8, 0x11, 0x11, 0x30, 0xDB, 0xCD, 0x10, 0xC3 };
	Bit8u some_data_50[8] = { 0xB8, 0x12, 0x11, 0x30, 0xDB, 0xCD, 0x10, 0xC3 };

	Bit8u some_data_buffers[2607] = {
	 0x81, 0xFC, 0x27, 0x0E, 0x77, 0x02, 0xCD, 0x20, 0xB9, 0x2F, 0x0A, 0xBE, 0x2F, 0x0B, 0xBF, 0xC7, 
	 0x0D, 0xBB, 0x00, 0x80, 0xFD, 0xF3, 0xA4, 0xFC, 0x87, 0xF7, 0x83, 0xEE, 0xC6, 0x19, 0xED, 0x57, 
	 0x57, 0xE9, 0x4F, 0x0C, 0x55, 0x50, 0x58, 0x21, 0x0D, 0x01, 0x04, 0x0A, 0x73, 0x99, 0x28, 0x45, 
	 0x05, 0x51, 0xE2, 0x52, 0x62, 0x0C, 0xA0, 0x09, 0x06, 0x50, 0x42, 0xFE, 0xE9, 0x0B, 0x84, 0x00, 
	 0x00, 0x35, 0x00, 0xFF, 0xEE, 0x06, 0x03, 0x2E, 0x8B, 0x26, 0x13, 0x01, 0x56, 0x57, 0xB9, 0xFF, 
	 0xFF, 0x0A, 0x00, 0xF3, 0xA5, 0x5F, 0x5E, 0x06, 0x1F, 0x89, 0x75, 0x02, 0x8B, 0xF7, 0x2E, 0x03, 
	 0x3E, 0xFB, 0xFF, 0x05, 0x01, 0x2E, 0xFF, 0x0E, 0x0B, 0x01, 0x74, 0x04, 0x89, 0x3C, 0xEB, 0xDB, 
	 0x24, 0xFE, 0x7F, 0x0E, 0x17, 0x01, 0xE3, 0x06, 0x8E, 0xC1, 0xB4, 0x49, 0xCD, 0x21, 0xC7, 0x04, 
	 0xFF, 0xDF, 0x35, 0x89, 0x36, 0x02, 0x00, 0x0E, 0x1F, 0x8B, 0x16, 0x15, 0x01, 0xA0, 0x07, 0xD6, 
	 0xFE, 0x01, 0x0A, 0x06, 0x08, 0x01, 0xB4, 0x31, 0x18, 0x4A, 0xFF, 0x3F, 0xE8, 0x01, 0x78, 0x2E, 
	 0xC4, 0x3E, 0x0D, 0x01, 0x26, 0x8C, 0x5D, 0x02, 0x26, 0x6E, 0xFF, 0x89, 0x1D, 0xEB, 0xD9, 0xE3, 
	 0x23, 0x8E, 0xC0, 0x4F, 0x06, 0x11, 0x5B, 0xEB, 0x11, 0x1E, 0x34, 0x12, 0x1E, 0xBF, 0x6D, 0x3D, 
	 0xBF, 0x41, 0x8D, 0x31, 0x51, 0xB9, 0x0C, 0xDF, 0x6E, 0x72, 0xA4, 0x59, 0x71, 0x33, 0xDB, 0xE2, 
	 0xDD, 0x6F, 0xB7, 0xC3, 0x04, 0xB4, 0x3E, 0x41, 0x43, 0x83, 0xFB, 0xFF, 0xFF, 0x05, 0x72, 0xF6, 
	 0xC3, 0x49, 0x6C, 0x6C, 0x65, 0x67, 0x61, 0x6C, 0x20, 0x42, 0x55, 0x46, 0x46, 0xFF, 0xFF, 0x45, 
	 0x52, 0x53, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6D, 0x65, 0x74, 0x65, 0x72, 0x3A, 0x20, 0x24, 0x2D, 
	 0xD8, 0x0D, 0x0A, 0x15, 0x0B, 0xFF, 0xFF, 0x50, 0x72, 0x65, 0x73, 0x73, 0x20, 0x3C, 0x45, 0x53, 
	 0x43, 0x3E, 0x20, 0x74, 0x6F, 0x20, 0x75, 0x27, 0xFB, 0x6E, 0x6C, 0x6F, 0x61, 0x64, 0x34, 0x6F, 
	 0x72, 0xED, 0xF6, 0x20, 0x61, 0x6E, 0x79, 0x06, 0x74, 0x68, 0x37, 0xBB, 0xF6, 0x20, 0x6B, 0x65, 
	 0x79, 0x38, 0x23, 0x63, 0x6F, 0xB5, 0xFF, 0x6E, 0x74, 0x69, 0x6E, 0x75, 0x65, 0x20, 0x77, 0x69, 
	 0x17, 0x6B, 0x87, 0x2A, 0x2E, 0x00, 0x56, 0x77, 0x58, 0x36, 0x73, 0x19, 0xB7, 0x5B, 0x63, 0x32, 
	 0x73, 0x3A, 0x2F, 0x24, 0x20, 0xFD, 0x6F, 0x00, 0x4E, 0x4F, 0x50, 0x41, 0x55, 0x53, 0x45, 0x4F, 
	 0x4E, 0x6D, 0xBF, 0x1B, 0x52, 0x4F, 0x52, 0x09, 0x44, 0x42, 0x6E, 0xED, 0xAE, 0x51, 0x90, 0x75, 
	 0x73, 0x65, 0x5A, 0x6D, 0xCB, 0x6E, 0x20, 0x72, 0x67, 0x0D, 0x76, 0xCC, 0x27, 0x25, 0x09, 0x50, 
	 0x17, 0xAF, 0x3D, 0x77, 0x68, 0x69, 0xBF, 0xB4, 0xED, 0xB6, 0x73, 0x6A, 0x67, 0x72, 0x6D, 0x6D, 
	 0xFD, 0xBB, 0x88, 0x64, 0x73, 0x25, 0x48, 0x45, 0x4C, 0x50, 0x6B, 0xBF, 0x43, 0x69, 0x73, 0x70, 
	 0x6C, 0x61, 0x99, 0x80, 0x6E, 0x5B, 0x08, 0x20, 0x69, 0x6C, 0x70, 0xFE, 0xDE, 0x09, 0x65, 0x78, 
	 0x74, 0x1E, 0x3F, 0x09, 0x4C, 0xB6, 0xD6, 0x12, 0x5D, 0xF9, 0x6C, 0xB3, 0xC9, 0x35, 0x00, 0xE4, 
	 0xB7, 0x7B, 0xC9, 0xC3, 0x20, 0x66, 0xD5, 0xED, 0x5C, 0x6E, 0x2D, 0x5D, 0x67, 0x65, 0xB6, 0xC1, 
	 0xB7, 0xC0, 0xB6, 0x0C, 0x01, 0x85, 0xFD, 0x00, 0x01, 0x01, 0x19, 0x04, 0xAA, 0xF6, 0xBF, 0xB9, 
	 0x45, 0x00, 0xDF, 0x02, 0x15, 0x03, 0x15, 0xDF, 0x2E, 0x28, 0xCA, 0x04, 0x7E, 0x00, 0xB0, 0xFB, 
	 0x08, 0x0D, 0xE6, 0x06, 0x3F, 0x0E, 0x0B, 0x05, 0x17, 0xBE, 0xFB, 0xC6, 0x07, 0x00, 0xC3, 0xE6, 
	 0x36, 0xDA, 0xFF, 0xF6, 0x02, 0x2E, 0xC7, 0x06, 0x04, 0xE3, 0x02, 0xE8, 0x03, 0xA0, 0x2E, 0x8F, 
	 0x73, 0x73, 0x09, 0x14, 0x8B, 0x16, 0xC2, 0x7F, 0x89, 0x16, 0xDC, 0x02, 0x52, 0x2E, 0x80, 0x3E, 
	 0xD9, 0xB7, 0xFF, 0xEE, 0x75, 0x26, 0x1B, 0x73, 0x1F, 0x85, 0xD2, 0x74, 0x1D, 0x81, 0xFA, 0xF6, 
	 0xF6, 0x17, 0x04, 0x75, 0x12, 0x0E, 0x18, 0x73, 0x10, 0x0A, 0xFF, 0x36, 0x07, 0x41, 0x16, 0xE1, 
	 0x02, 0xEB, 0x03, 0xE8, 0x04, 0xA5, 0xFB, 0x17, 0xEB, 0xD2, 0x5A, 0xC3, 0x2F, 0xDF, 0xF6, 0xDB, 
	 0x74, 0x06, 0x5C, 0x06, 0xDE, 0x02, 0x01, 0xC3, 0x27, 0x32, 0xD8, 0x2D, 0x41, 0x0C, 0x76, 0xE3, 
	 0x94, 0x32, 0x0A, 0x38, 0x06, 0x0C, 0x7C, 0xFF, 0x74, 0x05, 0x2E, 0xA0, 0xD8, 0x02, 0xF9, 0x2B, 
	 0xDE, 0xFF, 0xCE, 0x3A, 0xD4, 0xC3, 0x50, 0x53, 0x57, 0x06, 0x0E, 0x07, 0x95, 0xED, 0xFC, 0x33, 
	 0xD2, 0x7B, 0x3E, 0xDF, 0xBE, 0x11, 0xA3, 0x72, 0x59, 0x56, 0x05, 0x5D, 0xAE, 0x75, 0x07, 0xDD, 
	 0x2F, 0x85, 0x74, 0x2E, 0xEB, 0xF3, 0x06, 0x75, 0x7D, 0xFB, 0x09, 0x26, 0x8A, 0x45, 0xFF, 0x08, 
	 0x74, 0x74, 0x1E, 0x5E, 0xBD, 0xF0, 0x09, 0x3C, 0x3A, 0xDB, 0x84, 0xC0, 0x37, 0xBE, 0x3F, 0x47, 
	 0xEB, 0xF1, 0x83, 0x96, 0x26, 0x80, 0x6E, 0xB7, 0x3D, 0x65, 0xCB, 0xBA, 0x92, 0xEB, 0x1F, 0xB6, 
	 0xD6, 0xFC, 0x69, 0x39, 0xFD, 0x7F, 0x5B, 0xBD, 0x87, 0x8B, 0x1D, 0xBA, 0x18, 0x04, 0xF8, 0xFB, 
	 0x6F, 0xA4, 0x55, 0x02, 0x07, 0x5B, 0x73, 0x08, 0x8B, 0xF3, 0x0D, 0xFB, 0xBF, 0xF9, 0xEB, 0x01, 
	 0xF8, 0x07, 0x5F, 0x5B, 0x58, 0xC3, 0x24, 0x24, 0x82, 0xED, 0xA4, 0xE0, 0x29, 0x02, 0xDE, 0xB6, 
	 0x9B, 0xA2, 0x68, 0x88, 0x56, 0x52, 0x1E, 0x1B, 0x37, 0xDB, 0xBA, 0xAD, 0xD3, 0x09, 0xFF, 0x2E, 
	 0x1F, 0xAC, 0x6D, 0x08, 0x8A, 0xD0, 0xB4, 0x6F, 0xB7, 0x02, 0x0C, 0xEB, 0xF2, 0x05, 0xB2, 0x0D, 
	 0xCD, 0x5B, 0x9A, 0x21, 0x0A, 0x5A, 0x25, 0xDB, 0x98, 0x22, 0x5E, 0x47, 0xAC, 0xFF, 0x85, 0x3C, 
	 0xED, 0x06, 0x3C, 0x7A, 0x77, 0x02, 0x2C, 0x20, 0xC3, 0xDF, 0xF8, 0x20, 0x2F, 0x2C, 0x3B, 0x09, 
	 0x3D, 0x00, 0x3A, 0x3D, 0x2D, 0xFD, 0xBF, 0x51, 0xD2, 0xBF, 0x6B, 0x04, 0xB9, 0x08, 0x00, 0xF2, 
	 0xAE, 0xEC, 0xBB, 0x70, 0x59, 0xC3, 0x4C, 0x10, 0x15, 0x90, 0xE5, 0x73, 0x03, 0xFB, 0x5F, 0x63, 
	 0x75, 0xFA, 0x4E, 0xC3, 0x8A, 0x04, 0x08, 0xDF, 0xF8, 0x0F, 0x3C, 0x0D, 0x0D, 0x3C, 0x3B, 0x74, 
	 0x09, 0xFE, 0x8D, 0x3C, 0xB1, 0x05, 0x46, 0xEB, 0xEA, 0xF8, 0xC3, 0xF9, 0x5F, 0xE8, 0x5F, 0x3D, 
	 0x33, 0x3C, 0x3A, 0x74, 0x01, 0x43, 0x9E, 0x4E, 0xE0, 0x47, 0x70, 0x81, 0x66, 0x00, 0xBA, 0xFB, 
	 0xB1, 0xC9, 0xAD, 0x32, 0xE4, 0xCD, 0x16, 0x50, 0xA1, 0xD7, 0x5E, 0xAB, 0xA1, 0x05, 0xA1, 0xF0, 
	 0x58, 0x3C, 0x1B, 0x77, 0x89, 0x74, 0xA5, 0xD9, 0x05, 0xD8, 0x05, 0xBB, 0xF8, 0x1F, 0x40, 0x77, 
	 0x2B, 0xE6, 0x57, 0x56, 0x55, 0xE8, 0xC2, 0xE7, 0x20, 0x02, 0x8B, 0x36, 0xEB, 0x61, 0xE9, 0x8B, 
	 0xEE, 0x86, 0xAC, 0x4F, 0x2F, 0xBC, 0x2B, 0xE8, 0x05, 0xA8, 0x5A, 0x75, 0xF4, 0xB0, 0xF7, 0xB9, 
	 0x28, 0x08, 0x10, 0x15, 0x0D, 0x6E, 0x73, 0x0C, 0xB0, 0x29, 0xB0, 0x20, 0x04, 0xB1, 0xC8, 0xEB, 
	 0xE6, 0x10, 0x7B, 0xFB, 0x83, 0xC6, 0x04, 0x80, 0x3C, 0x4D, 0x0B, 0x3B, 0x2E, 0x3F, 0xDF, 0x7D, 
	 0x75, 0x2E, 0xBE, 0xE3, 0x44, 0xB9, 0x1B, 0x00, 0x3B, 0xD9, 0xF7, 0xF7, 0x72, 0x15, 0xB9, 0x35, 
	 0x06, 0x0E, 0xB0, 0x0D, 0x36, 0xDF, 0xCC, 0x0A, 0x5C, 0xEB, 0xA1, 0x2B, 0xCB, 0xFB, 0xD8, 0x76, 
	 0x9D, 0x43, 0xE2, 0xFB, 0xEB, 0x94, 0x1A, 0xB3, 0x2F, 0x1F, 0x5D, 0x5E, 0xA5, 0x13, 0x6E, 0x94, 
	 0x50, 0x52, 0x6C, 0x5F, 0xF6, 0x5A, 0x58, 0x43, 0xC3, 0x20, 0xC3, 0x83, 0xF9, 0x18, 0xFB, 0x50, 
	 0x77, 0x07, 0xE3, 0x05, 0x39, 0xC3, 0xAD, 0xD6, 0xBD, 0x43, 0x92, 0x6F, 0xBB, 0xCE, 0x0D, 0xBF, 
	 0xC3, 0x21, 0xCE, 0xB0, 0xBA, 0x16, 0x3B, 0x05, 0x02, 0xDC, 0xFE, 0xB4, 0xC3, 0x8B, 0x4D, 0x02, 
	 0x41, 0x67, 0x72, 0x05, 0xB5, 0xEF, 0x1F, 0xD8, 0x78, 0xE1, 0x8B, 0x72, 0xC9, 0x12, 0x5C, 0xDD, 
	 0xBD, 0x11, 0x3C, 0x09, 0x75, 0x3A, 0xEA, 0xEB, 0xEE, 0xDF, 0xFE, 0xC6, 0xE9, 0xF1, 0x69, 0x06, 
	 0xC1, 0x0A, 0x75, 0x01, 0x46, 0x25, 0xFB, 0x8B, 0x0D, 0x83, 0xC1, 0x02, 0x38, 0xF8, 0xBB, 0x02, 
	 0xE1, 0x42, 0x3C, 0xE8, 0x06, 0x55, 0xB0, 0xDD, 0x41, 0x83, 0xC3, 0x18, 0xD9, 0xF9, 0xAE, 0xB1, 
	 0xC1, 0x0B, 0xD1, 0xEB, 0x8B, 0xCB, 0xEF, 0x5A, 0x09, 0x22, 0xEB, 0xAD, 0x33, 0xC9, 0x74, 0x1B, 
	 0x2D, 0xAC, 0x52, 0x07, 0x1C, 0x7F, 0x85, 0x41, 0xEB, 0xF4, 0x0A, 0x7D, 0x37, 0xC7, 0x51, 0x56, 
	 0x93, 0xC9, 0x2E, 0xF6, 0xBA, 0xCD, 0x53, 0x2A, 0xFC, 0xD9, 0xB0, 0xBB, 0x9C, 0xBA, 0x01, 0x00, 
	 0x8B, 0x75, 0x6B, 0x6C, 0xC8, 0xF6, 0x52, 0x57, 0xFD, 0x61, 0x35, 0x38, 0xF8, 0x5E, 0x59, 0x5B, 
	 0xE4, 0x8B, 0x34, 0x33, 0xC8, 0x67, 0x2E, 0xBC, 0x1D, 0xEF, 0xBA, 0x2E, 0x24, 0x2B, 0x74, 0x1F, 
	 0x83, 0xFA, 0xEE, 0x85, 0x16, 0x57, 0x56, 0xBE, 0xB9, 0x1D, 0x78, 0x6B, 0x37, 0x40, 0x9D, 0xB4, 
	 0x00, 0x36, 0x57, 0xEF, 0x54, 0x09, 0x68, 0x61, 0xEC, 0x10, 0xEB, 0xDC, 0x1B, 0xBF, 0xE1, 0x3A, 
	 0x56, 0xD7, 0x8B, 0xFB, 0x8B, 0x05, 0xB9, 0x4B, 0x7C, 0xFB, 0x00, 0x2B, 0xC8, 0x73, 0x02, 0xA5, 
	 0xD1, 0xE9, 0x15, 0x8A, 0x5B, 0x33, 0x2E, 0x27, 0x7C, 0x06, 0x99, 0x6F, 0x05, 0xBB, 0xBE, 0x35, 
	 0x02, 0x39, 0xB3, 0x0B, 0x08, 0x46, 0x93, 0xD0, 0x42, 0x1F, 0x7F, 0x20, 0xAB, 0xF5, 0x62, 0x75, 
	 0x66, 0x66, 0xD7, 0x73, 0x0E, 0xBC, 0x64, 0x64, 0x65, 0x64, 0x05, 0xDA, 0xB6, 0xF1, 0x77, 0x04, 
	 0x28, 0xCB, 0xD5, 0xCB, 0xB1, 0xD6, 0xBA, 0x7D, 0x48, 0x4D, 0x41, 0x29, 0x0D, 0x62, 0x65, 0x08, 
	 0xEC, 0x89, 0x65, 0x24, 0x34, 0xA0, 0x75, 0x63, 0x9F, 0xB3, 0x76, 0x16, 0x15, 0x34, 0x97, 0xB7, 
	 0x20, 0x2B, 0x73, 0x69, 0x64, 0x44, 0x45, 0xBD, 0x6F, 0xD6, 0x76, 0x69, 0x65, 0x77, 0x44, 0xE7, 
	 0x86, 0x55, 0x4C, 0x0E, 0x18, 0x32, 0x38, 0x72, 0xCD, 0x15, 0xBB, 0x33, 0x2F, 0xE8, 0xB6, 0x4F, 
	 0x11, 0x76, 0x24, 0x69, 0xCB, 0x1A, 0x59, 0x34, 0x25, 0xD9, 0x02, 0xE9, 0x43, 0x26, 0x7B, 0xDB, 
	 0x66, 0x23, 0x64, 0x24, 0x4C, 0x09, 0x0C, 0xA2, 0xE0, 0xB0, 0x4B, 0x64, 0x0E, 0x4C, 0x57, 0x2C, 
	 0x60, 0xFB, 0x81, 0x63, 0x9F, 0x61, 0x10, 0x5B, 0x8C, 0x73, 0xB4, 0x0E, 0x2E, 0xF1, 0x6D, 0x62, 
	 0x05, 0xEC, 0xC0, 0x6F, 0x66, 0x65, 0x40, 0x83, 0x0F, 0x0D, 0x53, 0x79, 0x10, 0x2B, 0x70, 0x61, 
	 0x78, 0xEC, 0x47, 0x83, 0x01, 0x5B, 0x6E, 0x03, 0x1B, 0x5D, 0x12, 0xB8, 0x07, 0x2D, 0xB9, 0x60, 
	 0x19, 0x88, 0x59, 0xDB, 0x26, 0x68, 0xC7, 0x5B, 0xB5, 0xF6, 0x63, 0x75, 0x72, 0x69, 0x44, 0x6D, 
	 0xBB, 0x75, 0x6D, 0x6F, 0xC5, 0x74, 0x51, 0x52, 0x06, 0xB4, 0x7E, 0x07, 0xF9, 0x81, 0x09, 0x53, 
	 0x16, 0xD6, 0x0D, 0x8D, 0x75, 0xC9, 0x86, 0x20, 0x3D, 0x33, 0x95, 0x21, 0x2B, 0x2C, 0xD8, 0x49, 
	 0xD7, 0x26, 0x6D, 0x0B, 0x07, 0x79, 0xF6, 0xFE, 0x14, 0x0D, 0x00, 0x51, 0x44, 0x86, 0x85, 0x22, 
	 0xD6, 0x50, 0x04, 0xF4, 0x5F, 0x5D, 0xD2, 0xF7, 0xF3, 0x52, 0xD4, 0x0A, 0x84, 0xE4, 0xFC, 0xBF, 
	 0xF5, 0xE3, 0x09, 0x80, 0xC4, 0x30, 0x8A, 0xD4, 0xE8, 0x08, 0xF5, 0x41, 0xB6, 0x6B, 0xB3, 0x0E, 
	 0x08, 0x04, 0x0D, 0x05, 0xCE, 0xD0, 0xB9, 0xED, 0x8D, 0x51, 0x0B, 0x3C, 0x2A, 0xC9, 0x0B, 0xAE, 
	 0xF5, 0xFC, 0x8B, 0xC2, 0xBB, 0xBE, 0x07, 0x5A, 0xEE, 0x80, 0xC2, 0x30, 0x19, 0x9F, 0xC3, 0xC1, 
	 0xD2, 0x3D, 0x24, 0x70, 0xDC, 0x7E, 0x52, 0xBA, 0x4E, 0x07, 0xEB, 0x04, 0x05, 0x3B, 0x07, 0xD6, 
	 0x68, 0x62, 0xB5, 0x07, 0xF1, 0xEB, 0x3D, 0x09, 0x3D, 0xA1, 0x03, 0x78, 0x2F, 0xF8, 0x09, 0x22, 
	 0x5A, 0x0A, 0x4B, 0xEC, 0x83, 0xD5, 0x09, 0xC5, 0x1E, 0x66, 0x8B, 0x06, 0x06, 0x1E, 0xF0, 0xFF, 
	 0xC4, 0x1F, 0x26, 0x8B, 0x07, 0xB1, 0x04, 0xD3, 0xE8, 0x0C, 0xA8, 0x47, 0xDF, 0x2F, 0x80, 0x73, 
	 0x07, 0xBA, 0x40, 0x07, 0x25, 0xBA, 0x8E, 0xB1, 0x46, 0x37, 0x5A, 0xDD, 0xC1, 0x8E, 0x53, 0xAC, 
	 0xA1, 0x09, 0x3B, 0xB6, 0xC1, 0x06, 0x43, 0xBA, 0x2A, 0x1F, 0xC5, 0x16, 0x09, 0x4D, 0x5D, 0xBC, 
	 0x49, 0x9E, 0x2E, 0xA1, 0x86, 0xF7, 0xD6, 0x97, 0x26, 0xBB, 0x0F, 0x00, 0x03, 0x02, 0xC1, 0xF6, 
	 0xD2, 0x00, 0x43, 0xC7, 0x05, 0xB7, 0xB8, 0xB3, 0x2E, 0xA3, 0x77, 0x1F, 0x5B, 0xC7, 0x8B, 0xC3, 
	 0xC2, 0xF1, 0xFE, 0x65, 0xD7, 0x09, 0x05, 0xB8, 0x1B, 0x10, 0xCD, 0x15, 0xC3, 0x9D, 0xC9, 0x0D, 
	 0x1C, 0xAC, 0xB1, 0x43, 0xD6, 0xF9, 0x8E, 0x0B, 0xF7, 0x73, 0x22, 0x88, 0x5C, 0xFE, 0x7F, 0xFF, 
	 0x74, 0x0F, 0x41, 0x81, 0xF9, 0xD0, 0x07, 0x72, 0xF1, 0xBA, 0xB5, 0x07, 0x17, 0xD8, 0x1E, 0xE4, 
	 0x58, 0xE3, 0xF6, 0x1A, 0xDF, 0x89, 0x0E, 0x77, 0xE4, 0xF8, 0x66, 0xFA, 0xAA, 0xC4, 0x36, 0x21, 
	 0x7F, 0x3B, 0x73, 0xDE, 0xB6, 0x3D, 0x3B, 0xFB, 0x75, 0xF2, 0x57, 0xFC, 0xB7, 0x56, 0xC9, 0x51, 
	 0x8C, 0xC6, 0x4E, 0x8E, 0xDE, 0x33, 0xF6, 0xA1, 0x0D, 0xB5, 0x60, 0x00, 0x2A, 0x89, 0x65, 0x08, 
	 0xA6, 0x00, 0x75, 0x71, 0xB9, 0x06, 0xBE, 0xAD, 0x50, 0xA8, 0x8A, 0x18, 0x2F, 0x2D, 0xC1, 0x07, 
	 0x3E, 0x5F, 0xEB, 0xB4, 0x5B, 0x6C, 0x07, 0x58, 0xDE, 0x45, 0x2E, 0xB7, 0x0A, 0x03, 0x5D, 0x08, 
	 0x4D, 0x0C, 0xF6, 0x2D, 0xF6, 0xEB, 0xE8, 0x5D, 0x2B, 0xCA, 0xBF, 0xAD, 0x3B, 0x12, 0x83, 0x02, 
	 0x77, 0xBD, 0xE1, 0x01, 0x43, 0x89, 0x11, 0x8C, 0x06, 0x0F, 0x01, 0xF0, 0xBE, 0x5B, 0x47, 0xFE, 
	 0x05, 0x10, 0xBC, 0xCD, 0xFD, 0x2A, 0x03, 0x05, 0x04, 0xD2, 0xE9, 0xBB, 0xF4, 0x8B, 0xC8, 0x03, 
	 0xC8, 0xF9, 0x70, 0x2E, 0x91, 0xB6, 0x50, 0x46, 0x05, 0xF0, 0xEE, 0x87, 0x34, 0xAD, 0xE5, 0x11, 
	 0x9C, 0xA2, 0x81, 0xF2, 0xFF, 0x2B, 0xB0, 0x54, 0x07, 0xA0, 0xD4, 0x35, 0xB8, 0x26, 0xEB, 0x0C, 
	 0x0A, 0x0E, 0x9E, 0x0A, 0x00, 0xEB, 0x0D, 0x37, 0xF8, 0xE8, 0x0A, 0xBD, 0x8B, 0xFE, 0x37, 0x2C, 
	 0x30, 0xED, 0x5B, 0xD3, 0x77, 0x20, 0xBB, 0x07, 0x2C, 0xB5, 0xAD, 0x0D, 0x21, 0x18, 0x56, 0xD0, 
	 0xC0, 0x1D, 0x47, 0x7B, 0xDB, 0x94, 0x29, 0x06, 0x12, 0x73, 0x06, 0xC7, 0x05, 0xB5, 0x82, 0x2A, 
	 0xE1, 0x26, 0x0A, 0xD8, 0xA3, 0x68, 0x6F, 0xF3, 0xBE, 0x81, 0x00, 0x11, 0x05, 0x96, 0xB1, 0xD8, 
	 0x57, 0x56, 0xFB, 0x03, 0x77, 0xC3, 0xB4, 0x30, 0xA1, 0xFD, 0xFF, 0xAD, 0xF3, 0xB8, 0x03, 0x1E, 
	 0xEB, 0x07, 0x3C, 0x05, 0x76, 0xB6, 0xC5, 0x03, 0xB8, 0x17, 0xA3, 0x95, 0x9B, 0xE1, 0xC3, 0x52, 
	 0x77, 0x7B, 0x73, 0x3B, 0x6E, 0x0E, 0xFF, 0xFF, 0x19, 0x52, 0xB9, 0xDB, 0x6E, 0xAD, 0xF7, 0xE1, 
	 0x12, 0x36, 0xA5, 0x7F, 0x63, 0x5A, 0x0F, 0x2B, 0xD0, 0x74, 0x32, 0x8B, 0xCA, 0xFD, 0x1B, 0x25, 
	 0x53, 0xE8, 0x0B, 0x2F, 0x93, 0xB4, 0x48, 0xB6, 0xBD, 0x40, 0x73, 0x12, 0x93, 0x0A, 0x3C, 0xBF, 
	 0x3F, 0xEC, 0xE3, 0x1C, 0x11, 0x72, 0x12, 0x2E, 0x01, 0xD4, 0xB6, 0x0E, 0xAD, 0x5B, 0x39, 0x7E, 
	 0x73, 0x10, 0x32, 0x2B, 0xD1, 0x75, 0xCE, 0xC3, 0x89, 0x17, 0xB1, 0xBC, 0xE2, 0x0D, 0xE0, 0xE1, 
	 0x7F, 0xDB, 0xB9, 0x45, 0x44, 0xBA, 0x51, 0x53, 0xB8, 0x01, 0x1B, 0xAD, 0xB0, 0x85, 0xDB, 0xAC, 
	 0xCB, 0xB8, 0xB5, 0xD7, 0x28, 0x37, 0x17, 0x83, 0xC1, 0x6D, 0x0C, 0x03, 0x75, 0x0E, 0x2B, 0xDA, 
	 0xAD, 0xA0, 0x03, 0xBA, 0x8F, 0x8E, 0xFB, 0x25, 0x0D, 0x2F, 0x3C, 0x02, 0x72, 0x2B, 0x96, 0xA1, 
	 0x50, 0x63, 0x7B, 0x1E, 0x1E, 0xBE, 0xEF, 0x08, 0x7D, 0xA4, 0xB6, 0xD4, 0xF5, 0x74, 0x15, 0x32, 
	 0xD7, 0xB6, 0xB6, 0x0C, 0x34, 0xDA, 0x1C, 0x05, 0x8C, 0x2E, 0xDA, 0x25, 0xF0, 0xB4, 0x4C, 0x50, 
	 0xB1, 0x3D, 0x3B, 0x59, 0x4C, 0x31, 0xFE, 0x40, 0x47, 0xBA, 0x56, 0x07, 0x0F, 0xB6, 0xFF, 0x75, 
	 0xEA, 0x33, 0xC0, 0x87, 0x06, 0x2C, 0x00, 0x8E, 0x21, 0x49, 0x78, 0x69, 0x0D, 0x8C, 0xCA, 0xC5, 
	 0x20, 0x6C, 0x89, 0xC5, 0x1F, 0x80, 0x9A, 0xE1, 0x09, 0x2E, 0x2A, 0xAF, 0xA0, 0x19, 0x25, 0x08, 
	 0xFD, 0x56, 0x3E, 0x1C, 0x83, 0xC2, 0x07, 0x2B, 0xC2, 0xE6, 0xC8, 0xD0, 0xF6, 0x12, 0x60, 0xFC, 
	 0x3B, 0xC1, 0x76, 0x01, 0x91, 0x45, 0x8D, 0xC2, 0x24, 0xA6, 0x8B, 0x5B, 0x6B, 0x03, 0xAE, 0x19, 
	 0x16, 0x2B, 0x34, 0xC2, 0x1E, 0x25, 0xE3, 0x6D, 0x4B, 0x69, 0x99, 0x8C, 0xC8, 0x95, 0xDF, 0xDA, 
	 0x2D, 0x1C, 0xE9, 0x01, 0x62, 0x50, 0x18, 0x68, 0x6D, 0xE5, 0xDA, 0x23, 0x2B, 0x8B, 0xD0, 0x58, 
	 0x24, 0x3B, 0xDE, 0x3E, 0x92, 0x2E, 0x3B, 0xDC, 0x77, 0x03, 0xD8, 0x52, 0x84, 0xDD, 0x40, 0xF7, 
	 0xDC, 0x2B, 0x0D, 0x45, 0xD1, 0xDE, 0x78, 0x2E, 0x8C, 0x4D, 0x0E, 0x58, 0x87, 0x37, 0xB8, 0x6D, 
	 0xDF, 0x3F, 0x8C, 0xC9, 0x03, 0xC1, 0xA2, 0x87, 0x1B, 0x2C, 0x25, 0x8E, 0xB0, 0xFF, 0x78, 0x73, 
	 0x54, 0x4A, 0x17, 0x2B, 0x00, 0xE4, 0x5E, 0xC8, 0x12, 0x0D, 0x3D, 0x05, 0x64, 0x2D, 0xC6, 0x00, 
	 0x8D, 0xD6, 0xFF, 0x0D, 0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x2C, 0xDB, 0xFF, 0x28, 
	 0x63, 0x29, 0x20, 0x31, 0x39, 0x38, 0x38, 0x2D, 0x04, 0x39, 0xAB, 0xF5, 0x33, 0x0D, 0x51, 0x75, 
	 0x73, 0x70, 0xBE, 0x80, 0x79, 0x63, 0x6B, 0x20, 0x4F, 0x5A, 0xB7, 0x10, 0x69, 0x63, 0x22, 0xDC, 
	 0xB6, 0xDF, 0x73, 0x11, 0x6D, 0x73, 0xBA, 0x5A, 0x96, 0x38, 0x2E, 0xD0, 0xB7, 0x9C, 0x00, 0x38, 
	 0x00, 0x13, 0x50, 0xBB, 0xF2, 0x0C, 0xD8, 0x6D, 0x61, 0xE0, 0xFC, 0xED, 0x28, 0xB4, 0x2F, 0x31, 
	 0xD3, 0xB1, 0x51, 0x74, 0x73, 0x07, 0xF6, 0x7F, 0x66, 0x51, 0x50, 0x92, 0xF7, 0xE3, 0x91, 0x58, 
	 0x03, 0x5B, 0xE1, 0x03, 0xD1, 0xE5, 0xC6, 0x99, 0xBA, 0x0A, 0xA5, 0x08, 0x50, 0xFF, 0x86, 0x85, 
	 0x32, 0xED, 0x8A, 0xC8, 0x58, 0x80, 0xE9, 0x8D, 0xDB, 0xC6, 0x76, 0xF9, 0x66, 0x11, 0x33, 0x24, 
	 0x9B, 0xDA, 0x72, 0x07, 0xAB, 0x8E, 0x73, 0xE3, 0xED, 0x1D, 0x1E, 0x99, 0xF9, 0x4E, 0x5B, 0x2D, 
	 0x00, 0x80, 0x90, 0x00, 0x00, 0x02, 0x00, 0x00, 0x40, 0xFF, 0xA4, 0xE8, 0x34, 0x00, 0x72, 0xFA, 
	 0x41, 0xE8, 0x29, 0x00, 0xE3, 0x35, 0x73, 0xF9, 0x83, 0xE9, 0x03, 0x72, 0x06, 0x88, 0xCC, 0xAC, 
	 0xF7, 0xD0, 0x95, 0x31, 0xC9, 0xE8, 0x15, 0x00, 0x11, 0xC9, 0x75, 0x08, 0x41, 0xE8, 0x0D, 0x00, 
	 0x73, 0xFB, 0x41, 0x41, 0x41, 0x8D, 0x03, 0x96, 0xF3, 0xA4, 0x96, 0xEB, 0xCE, 0xE8, 0x02, 0x00, 
	 0x11, 0xC9, 0x01, 0xDB, 0x75, 0x04, 0xAD, 0x11, 0xC0, 0x93, 0xC3, 0x5E, 0xB9, 0x74, 0x00, 0xAC, 
	 0x2C, 0xE8, 0x3C, 0x01, 0x77, 0xF9, 0xC1, 0x04, 0x08, 0x29, 0x34, 0xAD, 0xE2, 0xF1, 0xC3
};

	Bit8u some_data_device[1608] = {
	 0xE9, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44,
	 0x45, 0x56, 0x49, 0x43, 0x45, 0x3A, 0x20, 0x24, 0x43, 0x6F, 0x75, 0x6C, 0x64, 0x20, 0x6E, 0x6F,
	 0x74, 0x20, 0x6C, 0x6F, 0x61, 0x64, 0x20, 0x24, 0x0D, 0x0A, 0x50, 0x72, 0x65, 0x73, 0x73, 0x20,
	 0x61, 0x6E, 0x79, 0x20, 0x6B, 0x65, 0x79, 0x20, 0x74, 0x6F, 0x20, 0x65, 0x78, 0x69, 0x74, 0x20,
	 0x2E, 0x2E, 0x2E, 0x20, 0x24, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x62, 0x6C, 0x6F, 0x63, 0x6B,
	 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2E, 0x0D, 0x0A, 0x49, 0x74, 0x20, 0x6D, 0x75, 0x73,
	 0x74, 0x20, 0x62, 0x65, 0x20, 0x6C, 0x6F, 0x61, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6E, 0x20, 0x43,
	 0x4F, 0x4E, 0x46, 0x49, 0x47, 0x2E, 0x53, 0x59, 0x53, 0x2E, 0x24, 0x0D, 0x0A, 0x49, 0x74, 0x20,
	 0x6D, 0x61, 0x79, 0x20, 0x62, 0x65, 0x20, 0x64, 0x61, 0x6E, 0x67, 0x65, 0x72, 0x6F, 0x75, 0x73,
	 0x20, 0x74, 0x6F, 0x20, 0x63, 0x6F, 0x6E, 0x74, 0x69, 0x6E, 0x75, 0x65, 0x20, 0x72, 0x75, 0x6E,
	 0x6E, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6F,
	 0x6E, 0x2E, 0x24, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x0D, 0x1E, 0x07, 0xBF, 0x03, 0x01, 0x8B, 0xD7, 0x32, 0xC0, 0xB9, 0x41, 0x00, 0xF2, 0xAE, 0xC6,
	 0x45, 0xFF, 0x24, 0xB4, 0x09, 0xCD, 0x21, 0xC3, 0x0E, 0x1F, 0x52, 0xBA, 0x5F, 0x01, 0xB4, 0x09,
	 0xCD, 0x21, 0x5A, 0xB4, 0x09, 0xCD, 0x21, 0x57, 0xE8, 0xD6, 0xFF, 0x5A, 0xB4, 0x09, 0xCD, 0x21,
	 0x80, 0x3E, 0x08, 0x02, 0x00, 0x74, 0x07, 0xBA, 0xCB, 0x01, 0xB4, 0x09, 0xCD, 0x21, 0xBA, 0x78,
	 0x01, 0xB4, 0x09, 0xCD, 0x21, 0xB4, 0x00, 0xCD, 0x16, 0x80, 0x3E, 0x08, 0x02, 0x00, 0x74, 0x0C,
	 0xE8, 0x11, 0x00, 0x8B, 0x16, 0x09, 0x02, 0xB8, 0x01, 0x31, 0xCD, 0x21, 0xE8, 0x91, 0x01, 0xB8,
	 0x01, 0x4C, 0xCD, 0x21, 0x33, 0xDB, 0xB4, 0x3E, 0xCD, 0x21, 0x43, 0x83, 0xFB, 0x05, 0x72, 0xF6,
	 0xC3, 0xCD, 0x21, 0x73, 0x08, 0xBA, 0x68, 0x01, 0xBF, 0x03, 0x02, 0xEB, 0x9B, 0x33, 0xF6, 0x0E,
	 0x07, 0xBB, 0x48, 0x01, 0x8E, 0x1E, 0x06, 0x02, 0xF6, 0x44, 0x05, 0x80, 0x75, 0x02, 0xEB, 0x7A,
	 0x8B, 0x44, 0x06, 0x2E, 0xA3, 0x04, 0x02, 0x56, 0x1E, 0x2E, 0xFF, 0x1E, 0x04, 0x02, 0x1F, 0x5E,
	 0x8B, 0x44, 0x08, 0x2E, 0xA3, 0x04, 0x02, 0x56, 0x2E, 0xFF, 0x1E, 0x04, 0x02, 0x5E, 0x0E, 0x1F,
	 0xC6, 0x06, 0x08, 0x02, 0x01, 0x8B, 0x1E, 0x56, 0x01, 0x83, 0xC3, 0x0F, 0xB1, 0x04, 0xD3, 0xEB,
	 0x03, 0x1E, 0x58, 0x01, 0xA1, 0x06, 0x02, 0x8B, 0xD3, 0x2B, 0xD8, 0x76, 0x35, 0xE8, 0x43, 0x00,
	 0x8E, 0xC0, 0x26, 0xFF, 0x34, 0xE8, 0x7D, 0x00, 0x5E, 0x83, 0xFE, 0xFF, 0x75, 0xA1, 0x8C, 0xC8,
	 0x2B, 0xD0, 0x89, 0x16, 0x09, 0x02, 0x8E, 0x06, 0x2C, 0x00, 0xB4, 0x49, 0xCD, 0x21, 0x8E, 0x06,
	 0x06, 0x02, 0x26, 0xF6, 0x06, 0x05, 0x00, 0x80, 0x74, 0x10, 0xE8, 0x67, 0xFF, 0xB8, 0x00, 0x31,
	 0xCD, 0x21, 0xE8, 0xEB, 0x00, 0xB8, 0x01, 0x4C, 0xCD, 0x21, 0xBA, 0x03, 0x02, 0xBF, 0x95, 0x01,
	 0xE9, 0x05, 0xFF, 0x50, 0x53, 0x1E, 0x06, 0x8E, 0xD8, 0xB4, 0x52, 0xCD, 0x21, 0x8B, 0x44, 0x04,
	 0xF6, 0xC4, 0x80, 0x74, 0x2B, 0x2E, 0xF6, 0x06, 0x20, 0x02, 0x04, 0x74, 0x0D, 0xA8, 0x01, 0x74,
	 0x09, 0xFA, 0x26, 0x89, 0x77, 0x0C, 0x26, 0x8C, 0x5F, 0x0E, 0x2E, 0xF6, 0x06, 0x20, 0x02, 0x08,
	 0x74, 0x0D, 0xA8, 0x08, 0x74, 0x09, 0xFA, 0x26, 0x89, 0x77, 0x08, 0x26, 0x8C, 0x5F, 0x0A, 0xFB,
	 0x07, 0x1F, 0x5B, 0x58, 0xC3, 0x2E, 0xF6, 0x06, 0x20, 0x02, 0x01, 0x74, 0x28, 0x50, 0x53, 0x1E,
	 0x2E, 0xC5, 0x1E, 0x0B, 0x02, 0xFA, 0x8B, 0x07, 0x26, 0x89, 0x04, 0x8B, 0x47, 0x02, 0x26, 0x89,
	 0x44, 0x02, 0x8C, 0x47, 0x02, 0x89, 0x37, 0x2E, 0x8C, 0x06, 0x15, 0x02, 0x2E, 0x89, 0x36, 0x13,
	 0x02, 0xFB, 0x1F, 0x5B, 0x58, 0xC3, 0x56, 0x06, 0x2E, 0xC4, 0x36, 0x13, 0x02, 0xEB, 0x07, 0x56,
	 0x06, 0x2E, 0xC4, 0x36, 0x0F, 0x02, 0x53, 0x1E, 0x2E, 0xC5, 0x1E, 0x0B, 0x02, 0x8C, 0x47, 0x02,
	 0x89, 0x37, 0x1F, 0x5B, 0x07, 0x5E, 0xC3, 0x2E, 0x3A, 0x26, 0x1F, 0x02, 0x74, 0x05, 0x2E, 0xFF,
	 0x2E, 0x1B, 0x02, 0xFB, 0x3C, 0x00, 0x74, 0x10, 0x3C, 0x09, 0x74, 0x2A, 0x3C, 0x08, 0x75, 0x03,
	 0xE8, 0xCC, 0xFF, 0xEA, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xFF, 0x81, 0xFB, 0x56, 0x44, 0x75, 0x15,
	 0x81, 0xF9, 0x44, 0x58, 0x75, 0x0F, 0x81, 0xFA, 0x31, 0x49, 0x75, 0x09, 0xBB, 0x45, 0x48, 0xB9,
	 0x45, 0x52, 0xBA, 0x56, 0x44, 0xCF, 0x9C, 0x2E, 0xFF, 0x1E, 0xE4, 0x03, 0xE8, 0x97, 0xFF, 0xCF,
	 0x2E, 0xF6, 0x06, 0x20, 0x02, 0x02, 0x74, 0x10, 0x50, 0x52, 0x1E, 0x2E, 0xC5, 0x16, 0x17, 0x02,
	 0xB8, 0x2F, 0x25, 0xCD, 0x21, 0x1F, 0x5A, 0x58, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0xF6, 0x06, 0x20, 0x02, 0x02, 0x74,
	 0x21, 0x50, 0x53, 0x52, 0x1E, 0x06, 0x0E, 0x1F, 0xB8, 0x2F, 0x35, 0xCD, 0x21, 0x89, 0x1E, 0x17,
	 0x02, 0x8C, 0x06, 0x19, 0x02, 0xBA, 0xC7, 0x03, 0xB8, 0x2F, 0x25, 0xCD, 0x21, 0x07, 0x1F, 0x5A,
	 0x5B, 0x58, 0xC3, 0x50, 0x53, 0x53, 0x51, 0x52, 0xB8, 0x01, 0x2B, 0x33, 0xDB, 0xB9, 0x45, 0x44,
	 0xBA, 0x51, 0x53, 0xCD, 0x21, 0x8B, 0xC3, 0x3D, 0x02, 0x00, 0x75, 0x02, 0x86, 0xE0, 0x5A, 0x59,
	 0x5B, 0x85, 0xC0, 0x74, 0x17, 0xB3, 0x00, 0x3D, 0x1A, 0x02, 0x72, 0x0B, 0x80, 0xCB, 0x05, 0x3D,
	 0x32, 0x02, 0x73, 0x03, 0x80, 0xCB, 0x02, 0x2E, 0x88, 0x1E, 0x20, 0x02, 0x5B, 0x58, 0xC3, 0x50,
	 0x53, 0x57, 0x06, 0xB4, 0x52, 0xCD, 0x21, 0x83, 0xEB, 0x02, 0x53, 0xBF, 0x19, 0x00, 0xB4, 0x30,
	 0xCD, 0x21, 0x3C, 0x02, 0x74, 0x0B, 0xBF, 0x24, 0x00, 0x3D, 0x03, 0x00, 0x75, 0x03, 0xBF, 0x2A,
	 0x00, 0x5B, 0x03, 0xDF, 0x2E, 0x8C, 0x06, 0x0D, 0x02, 0x2E, 0x89, 0x1E, 0x0B, 0x02, 0x26, 0xC4,
	 0x1F, 0x2E, 0x8C, 0x06, 0x11, 0x02, 0x2E, 0x89, 0x1E, 0x0F, 0x02, 0x2E, 0x8C, 0x06, 0x15, 0x02,
	 0x2E, 0x89, 0x1E, 0x13, 0x02, 0x07, 0x5F, 0x5B, 0x58, 0xC3, 0x50, 0x53, 0x51, 0x52, 0x57, 0x56,
	 0x06, 0xB8, 0x2F, 0x35, 0xCD, 0x21, 0x8C, 0xC1, 0x85, 0xC9, 0x75, 0x05, 0xBB, 0x05, 0x04, 0x8C,
	 0xD9, 0x89, 0x1E, 0x1B, 0x02, 0x89, 0x0E, 0x1D, 0x02, 0x89, 0x1E, 0xE4, 0x03, 0x89, 0x0E, 0xE6,
	 0x03, 0x8A, 0x26, 0x1F, 0x02, 0x84, 0xE4, 0x75, 0x02, 0xB4, 0xDE, 0x8C, 0xC1, 0xE3, 0x51, 0xB0,
	 0x00, 0xBB, 0x56, 0x44, 0xB9, 0x44, 0x58, 0xBA, 0x31, 0x49, 0x50, 0x1E, 0xCD, 0x2F, 0x8B, 0xF8,
	 0x81, 0xE7, 0xFF, 0x00, 0x1F, 0x58, 0x74, 0x2E, 0x81, 0xFF, 0xFF, 0x00, 0x75, 0x14, 0x81, 0xFB,
	 0x45, 0x48, 0x75, 0x0E, 0x81, 0xF9, 0x45, 0x52, 0x75, 0x08, 0x81, 0xFA, 0x56, 0x44, 0x75, 0x02,
	 0xEB, 0x1E, 0x80, 0x3E, 0x1F, 0x02, 0x00, 0x75, 0x0D, 0xFE, 0xC4, 0x75, 0x02, 0xB4, 0xC0, 0x80,
	 0xFC, 0xDE, 0x75, 0xBD, 0x32, 0xE4, 0xC7, 0x06, 0xE4, 0x03, 0x05, 0x04, 0x8C, 0x1E, 0xE6, 0x03,
	 0x88, 0x26, 0x1F, 0x02, 0x07, 0x5E, 0x5F, 0x5A, 0x59, 0x5B, 0x58, 0xC3, 0x45, 0x72, 0x72, 0x6F,
	 0x72, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6E, 0x67, 0x20, 0x58, 0x44, 0x49, 0x2E,
	 0x20, 0x20, 0x54, 0x65, 0x72, 0x6D, 0x69, 0x6E, 0x61, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x2E, 0x20,
	 0x2E, 0x20, 0x2E, 0x0D, 0x0A, 0x24, 0x1E, 0x0E, 0x1F, 0xF6, 0x06, 0x20, 0x02, 0x02, 0x74, 0x16,
	 0xE8, 0x37, 0xFF, 0x80, 0x3E, 0x1F, 0x02, 0x00, 0x75, 0x0C, 0xBA, 0x6C, 0x06, 0xB4, 0x09, 0xCD,
	 0x21, 0xB8, 0x01, 0x4C, 0xCD, 0x21, 0x1F, 0xC3, 0x50, 0x56, 0x57, 0x06, 0x1E, 0x07, 0xFC, 0x8D,
	 0x7C, 0xFF, 0xAC, 0x3C, 0x20, 0x74, 0x0B, 0x3C, 0x0D, 0x74, 0x07, 0x3C, 0x0A, 0x74, 0x03, 0xAA,
	 0xEB, 0xF0, 0xB0, 0x20, 0xAA, 0x07, 0x5F, 0x5E, 0x58, 0x4E, 0xC3, 0xFC, 0xBF, 0x03, 0x01, 0xBE,
	 0x81, 0x00, 0x8A, 0x0E, 0x80, 0x00, 0x32, 0xED, 0xE3, 0x0E, 0x8B, 0xD9, 0xC6, 0x40, 0x01, 0x0A,
	 0x80, 0x3C, 0x20, 0x75, 0x04, 0x46, 0xE2, 0xF8, 0xC3, 0xE8, 0xBC, 0xFF, 0x89, 0x36, 0x5A, 0x01,
	 0x80, 0x3C, 0x20, 0x74, 0x03, 0xA4, 0xE2, 0xF8, 0xC3, 0xBC, 0x29, 0x05, 0xE8, 0x44, 0xFE, 0xE8,
	 0x7D, 0xFE, 0xE8, 0x81, 0xFF, 0xE8, 0x11, 0xFE, 0xE8, 0xC0, 0xFF, 0x8C, 0x0E, 0x5C, 0x01, 0xA1,
	 0x02, 0x00, 0xA3, 0x58, 0x01, 0x8B, 0xDC, 0x83, 0xC3, 0x0F, 0xB1, 0x04, 0xD3, 0xEB, 0x8C, 0xC8,
	 0x03, 0xC3, 0xBB, 0x44, 0x01, 0x89, 0x07, 0x89, 0x47, 0x02, 0xA3, 0x06, 0x02, 0xBA, 0x03, 0x01,
	 0x1E, 0x07, 0xB8, 0x03, 0x4B, 0xE9, 0x49, 0xFB
	};

	Bit8u some_data_fcbs[2402] = {
	 0x81, 0xFC, 0x95, 0x0D, 0x77, 0x02, 0xCD, 0x20, 0xB9, 0x62, 0x09, 0xBE, 0x62, 0x0A, 0xBF, 0x35,
	 0x0D, 0xBB, 0x00, 0x80, 0xFD, 0xF3, 0xA4, 0xFC, 0x87, 0xF7, 0x83, 0xEE, 0xC6, 0x19, 0xED, 0x57,
	 0x57, 0xE9, 0xBD, 0x0B, 0x55, 0x50, 0x58, 0x21, 0x0D, 0x01, 0x04, 0x0A, 0x5C, 0x70, 0x7A, 0x7D,
	 0x5C, 0xF3, 0x33, 0xA3, 0xD0, 0x0B, 0xD3, 0x08, 0x06, 0xD9, 0x5D, 0xF3, 0xE9, 0x03, 0x6F, 0x00,
	 0x51, 0x03, 0x1E, 0xFF, 0xFF, 0x00, 0x1A, 0x00, 0xB8, 0xFF, 0xFF, 0xAB, 0xAB, 0x8B, 0xC3, 0xAB,
	 0x83, 0xC6, 0x06, 0x85, 0xED, 0xFF, 0xFF, 0x74, 0x0D, 0xFC, 0x51, 0x2E, 0x8B, 0x0E, 0x07, 0x01,
	 0xF3, 0xA4, 0x4D, 0x75, 0xF6, 0x59, 0x32, 0x7F, 0xB0, 0xC0, 0x0D, 0xAA, 0x59, 0xE2, 0xF5, 0x2E,
	 0xC5, 0xBF, 0xFD, 0x36, 0x03, 0x01, 0xFA, 0xC7, 0x44, 0x32, 0x00, 0x8C, 0x44, 0x1C, 0xFB, 0xFF,
	 0x77, 0x18, 0x09, 0x01, 0xE3, 0x06, 0x8E, 0xC1, 0xB4, 0x49, 0xCD, 0x21, 0x8D, 0xDB, 0xFF, 0x95,
	 0x8F, 0x01, 0xB1, 0x04, 0xD3, 0xEA, 0xB8, 0x00, 0x31, 0x0C, 0x8B, 0x3F, 0xB0, 0xC0, 0x01, 0x90,
	 0x51, 0x44, 0x46, 0x90, 0xFD, 0x43, 0x42, 0x53, 0x20, 0x20, 0x00, 0x00, 0xFF, 0xF6, 0x50, 0xB4,
	 0x02, 0x2B, 0x58, 0xC3, 0x33, 0xD2, 0xF7, 0xF3, 0x52, 0xFF, 0xFF, 0xD4, 0x0A, 0x84, 0xE4, 0x75,
	 0x02, 0xE3, 0x09, 0x80, 0xC4, 0x30, 0x8A, 0xD4, 0xE8, 0x01, 0x86, 0xDB, 0xEE, 0x41, 0x84, 0xC0,
	 0x0E, 0x08, 0x04, 0x0D, 0xD0, 0xFB, 0x3F, 0x5A, 0xC3, 0x51, 0xBB, 0xE8, 0x34, 0xBB, 0xC9, 0x0B,
	 0x77, 0x7F, 0x8D, 0x8B, 0xC2, 0xBB, 0x0A, 0x00, 0x07, 0x80, 0xC2, 0x30, 0xCB, 0x76, 0x19, 0x59,
	 0xC3, 0x52, 0xCD, 0xFC, 0x50, 0xBA, 0xB2, 0x0A, 0xB4, 0x09, 0x17, 0x7F, 0xEC, 0xB3, 0xBA, 0xD4,
	 0x0A, 0xC3, 0x52, 0xBA, 0x8B, 0x0A, 0x50, 0xC7, 0xB6, 0x53, 0x05, 0x7B, 0x0E, 0xA1, 0xCF, 0x76,
	 0xBB, 0x01, 0x1B, 0xB2, 0x2C, 0x38, 0xA1, 0xD4, 0xFB, 0xFB, 0x0A, 0x5A, 0x15, 0x5B, 0x58, 0x5A,
	 0x27, 0x6E, 0xBF, 0x81, 0x0A, 0xEB, 0xD6, 0xB4, 0x52, 0x0D, 0x89, 0x1E, 0xFF, 0xDF, 0xE4, 0x8C,
	 0x06, 0x05, 0x01, 0x83, 0x3E, 0xD1, 0x01, 0x03, 0x75, 0x0C, 0xC7, 0x7F, 0xFB, 0x06, 0x0D, 0x01,
	 0x22, 0x00, 0x05, 0x0B, 0x01, 0x26, 0x00, 0x8B, 0x3E, 0x6B, 0x37, 0x8B, 0x01, 0xA3, 0x3A, 0x09,
	 0xDB, 0x65, 0x0D, 0xC4, 0x19, 0x0C, 0x4F, 0x3F, 0xF6, 0x04, 0xB8, 0x38, 0x00, 0x2A, 0x74, 0x0B,
	 0xB0, 0x3B, 0x80, 0xE1, 0x77, 0x08, 0x04, 0x74, 0x02, 0xB0, 0x35, 0xA3, 0x32, 0xB6, 0x76, 0x89,
	 0x0E, 0x6C, 0x4B, 0x84, 0xFF, 0x6F, 0x86, 0x01, 0x1E, 0x85, 0xDB, 0x75, 0x13, 0x8C, 0xC3, 0x4B,
	 0x8E, 0xDB, 0xFF, 0x0B, 0x4B, 0x33, 0xF6, 0xBF, 0x70, 0x01, 0xB9, 0x08, 0x00, 0xF3, 0x9B, 0xFB,
	 0xA6, 0x74, 0x1B, 0x1F, 0x8B, 0x20, 0x24, 0x78, 0x69, 0xB6, 0x01, 0x07, 0x86, 0x7A, 0xFB, 0x9F,
	 0x34, 0x7C, 0x01, 0xEB, 0x0A, 0xB9, 0x06, 0x21, 0xDF, 0x7E, 0xA4, 0xAD, 0x1F, 0xA3, 0x09, 0x40,
	 0x0E, 0x7E, 0x01, 0xF8, 0xDB, 0x0B, 0x25, 0xDB, 0xB4, 0x3E, 0x9C, 0x43, 0xFF, 0xFF, 0x83, 0xFB,
	 0x05, 0x72, 0xF6, 0xC3, 0xAC, 0x3C, 0x20, 0x74, 0xFB, 0x3C, 0x09, 0x74, 0xF7, 0x4E, 0xFE, 0xE6,
	 0xC3, 0xBE, 0x81, 0xA3, 0x05, 0xF3, 0x02, 0xE8, 0x06, 0x39, 0x17, 0xEE, 0x17, 0x2B, 0x75, 0x07,
	 0xC6, 0xCE, 0x01, 0x67, 0x6F, 0x40, 0x0C, 0x3C, 0x3D, 0x0A, 0x00, 0xFE, 0xDB, 0xEB, 0x01, 0x25,
	 0x80, 0x7C, 0xFF, 0x2C, 0x75, 0x09, 0x81, 0xFE, 0xFF, 0xDF, 0x2C, 0x74, 0x03, 0x4E, 0xEB, 0x2D,
	 0xE8, 0x02, 0xD8, 0x8B, 0xFE, 0x80, 0x3C, 0x5F, 0xF8, 0x2C, 0x74, 0x23, 0xBB, 0x82, 0x06, 0x0C,
	 0x84, 0x72, 0x3E, 0xB0, 0x6B, 0xB9, 0x29, 0x75, 0x0F, 0x7B, 0xDB, 0x20, 0x29, 0x06, 0x12, 0x73,
	 0x06, 0xC7, 0x05, 0xBB, 0x82, 0x51, 0x22, 0x75, 0x21, 0x63, 0xB7, 0x46, 0x2A, 0xBB, 0xD6, 0x25,
	 0x18, 0xCD, 0x21, 0xD4, 0xD6, 0x33, 0x23, 0xD6, 0x9C, 0xFD, 0x76, 0x8B, 0xF7, 0x7D, 0xD9, 0xF9,
	 0xC3, 0xB4, 0x30, 0xFF, 0xBF, 0xA1, 0x3C, 0x0A, 0x75, 0x05, 0xB8, 0x03, 0x1E, 0xEB, 0x07, 0x3C,
	 0x04, 0x76, 0x03, 0xBC, 0xF0, 0xB8, 0x04, 0x00, 0xA3, 0x11, 0xC3, 0xBC, 0x50, 0x7F, 0x6B, 0x55,
	 0xBF, 0xB9, 0x45, 0x44, 0xBA, 0x51, 0x53, 0x0B, 0xED, 0xB8, 0x01, 0x2B, 0x24, 0x0E, 0x74, 0x5F,
	 0xB6, 0x05, 0xA6, 0xD3, 0xE8, 0x03, 0x57, 0xBA, 0xF6, 0xC3, 0x92, 0x0A, 0x36, 0x02, 0x76, 0x71,
	 0x95, 0xFC, 0xF6, 0x18, 0x72, 0x6C, 0x04, 0xCB, 0x72, 0x75, 0xBC, 0x02, 0x9A, 0x33, 0x7E, 0x80,
	 0xB2, 0xBB, 0xD9, 0x06, 0xD6, 0x02, 0xEB, 0x5D, 0x17, 0xAE, 0x7B, 0x12, 0xBA, 0x54, 0x29, 0xD3,
	 0x0E, 0x8F, 0xFF, 0x47, 0x33, 0xC0, 0x87, 0x06, 0x2C, 0x00, 0x8E, 0xC0, 0x79, 0x8F, 0xDB, 0xB4,
	 0x0D, 0x03, 0xBF, 0x80, 0x7C, 0xE3, 0xFF, 0xEF, 0x8C, 0xCE, 0x03, 0xFE, 0x8B, 0x36, 0x02, 0x00,
	 0x2B, 0xF7, 0xD3, 0xDD, 0xBF, 0xF7, 0xC6, 0x00, 0xF0, 0x75, 0x06, 0x8B, 0xC6, 0x18, 0xE0, 0x84,
	 0x1D, 0x62, 0x36, 0x07, 0x5C, 0xDF, 0x5A, 0x99, 0x56, 0x3B, 0xC3, 0x73, 0x17, 0xC3, 0x0B, 0xFB,
	 0xD6, 0xEB, 0x04, 0xFC, 0x56, 0xB6, 0x8F, 0x4C, 0x0D, 0x8E, 0xED, 0xEA, 0x32, 0x4C, 0x4C, 0x20,
	 0x19, 0x9F, 0x82, 0xBA, 0x46, 0x2D, 0x0D, 0xB7, 0x7A, 0x01, 0x06, 0xEB, 0x0E, 0x77, 0x6C, 0x03,
	 0xC4, 0xF9, 0x26, 0x89, 0x4C, 0x47, 0xBE, 0x1E, 0x1C, 0x2E, 0x8E, 0xC7, 0x6C, 0xDB, 0x33, 0xFF,
	 0x19, 0x82, 0x54, 0x2E, 0x73, 0xBF, 0x8B, 0xDD, 0x03, 0xD9, 0x89, 0x5C, 0x46, 0xE3, 0x98, 0xB6,
	 0x74, 0xB2, 0x72, 0x1A, 0x5B, 0xAF, 0xB3, 0x57, 0x2F, 0x94, 0x30, 0xDE, 0xE9, 0x01, 0x0D, 0xF7,
	 0xC2, 0x2B, 0x00, 0x36, 0x80, 0x0C, 0x3D, 0x05, 0xF4, 0x7F, 0xD7, 0x05, 0x00, 0x49, 0x6C, 0x6C,
	 0x65, 0x67, 0x61, 0x6C, 0x20, 0xFF, 0x8F, 0x13, 0x70, 0x61, 0x72, 0x61, 0x6D, 0x65, 0x74, 0x65,
	 0x72, 0x3A, 0x20, 0x6F, 0xEF, 0x24, 0x0D, 0x0A, 0x12, 0x08, 0x50, 0x72, 0x65, 0x0B, 0xFF, 0x73,
	 0x73, 0x20, 0x3C, 0x45, 0x53, 0x43, 0x3E, 0xE5, 0x6F, 0xCF, 0xFE, 0x20, 0x75, 0x6E, 0x6C, 0x6F,
	 0x61, 0x64, 0x2E, 0x6F, 0x72, 0xED, 0xF6, 0x20, 0x61, 0x6E, 0x79, 0x06, 0x74, 0x68, 0x31, 0xBB,
	 0xF6, 0x20, 0x6B, 0x65, 0x79, 0x32, 0x20, 0x63, 0x6F, 0xB5, 0xFF, 0x6E, 0x74, 0x69, 0x6E, 0x75,
	 0x65, 0x20, 0x77, 0x69, 0x17, 0xAD, 0x8D, 0x27, 0x2E, 0x00, 0x4D, 0x75, 0x63, 0x30, 0x73, 0x13,
	 0x63, 0x76, 0xBB, 0x2C, 0x73, 0x3A, 0x29, 0x24, 0x20, 0x00, 0xFF, 0xFF, 0x4E, 0x4F, 0x50, 0x41,
	 0x55, 0x53, 0x45, 0x4F, 0x4E, 0x45, 0x52, 0x52, 0x4F, 0x52, 0x09, 0xD7, 0xB6, 0x44, 0x3C, 0x6E,
	 0x4B, 0x84, 0xE5, 0x76, 0x75, 0x73, 0x65, 0x54, 0x6E, 0x20, 0xE6, 0xB6, 0x72, 0x61, 0x0D, 0x27,
	 0x25, 0x1E, 0x3B, 0x09, 0x50, 0x17, 0x77, 0x68, 0x69, 0xDB, 0xD7, 0xB0, 0xA8, 0x73, 0x64, 0x67,
	 0xDD, 0x76, 0x6C, 0x6D, 0x6D, 0x82, 0x64, 0x73, 0xDF, 0xFE, 0x25, 0x48, 0x45, 0x4C, 0x50, 0x43,
	 0x69, 0x73, 0x70, 0x6C, 0xAD, 0xB5, 0x61, 0x93, 0x7A, 0x08, 0x6F, 0xB7, 0x20, 0x69, 0x6C, 0x70,
	 0x09, 0x65, 0x78, 0x74, 0x6B, 0x7F, 0x1E, 0x3F, 0x09, 0x4C, 0x12, 0x5D, 0x64, 0x5B, 0xEA, 0x6C,
	 0x35, 0xBD, 0xD9, 0x00, 0xDB, 0xC3, 0xAE, 0xDB, 0xBD, 0x20, 0x66, 0xCF, 0x6E, 0x2D, 0xE4, 0x76,
	 0x5D, 0x67, 0x65, 0xB4, 0x61, 0xDB, 0xC3, 0x71, 0x04, 0x01, 0x00, 0x76, 0x16, 0x76, 0xDB, 0x06,
	 0xAA, 0x0A, 0xFF, 0xB9, 0x45, 0x00, 0xA1, 0x05, 0x3F, 0xDB, 0xC5, 0x15, 0x28, 0x8C, 0x07, 0x7E,
	 0x77, 0xFF, 0x00, 0x76, 0x0C, 0xA8, 0x09, 0x3F, 0x0E, 0xCD, 0x07, 0x00, 0xFC, 0xDB, 0x2E, 0xC6,
	 0x03, 0xC3, 0x2E, 0xFF, 0x36, 0x9C, 0x05, 0x2E, 0x71, 0x6B, 0x97, 0x04, 0xA5, 0x05, 0xCD, 0xBD,
	 0x93, 0x62, 0x2E, 0x8F, 0x09, 0x14, 0xF8, 0xCD, 0x8B, 0x16, 0x89, 0x16, 0x9E, 0x05, 0x52, 0x2E,
	 0xB7, 0xDC, 0x41, 0x9B, 0x05, 0x26, 0x1B, 0xFF, 0x7F, 0x73, 0x1F, 0x85, 0xD2, 0x74, 0x1D, 0x81,
	 0xFA, 0xD9, 0x06, 0x75, 0x12, 0xE8, 0x05, 0xDA, 0xDB, 0xD8, 0x73, 0x10, 0x0A, 0x07, 0x41, 0x16,
	 0x8E, 0x4B, 0x4E, 0xEB, 0x03, 0xD0, 0xBA, 0xD6, 0xEB, 0xD2, 0x17, 0x2F, 0xA1, 0xBA, 0x5D, 0x74,
	 0x06, 0x5C, 0x06, 0xA0, 0x6C, 0xDB, 0x13, 0xC3, 0x27, 0xEF, 0x41, 0x63, 0x19, 0x0C, 0x56, 0x33,
	 0x6D, 0x7B, 0x2E, 0x38, 0x06, 0x0C, 0x74, 0x5B, 0xCC, 0xF7, 0xA0, 0x9A, 0x05, 0xF9, 0x2B, 0xA0,
	 0x37, 0xDE, 0x3A, 0x07, 0x96, 0xC3, 0x00, 0x57, 0x06, 0x36, 0x4A, 0xEB, 0xF5, 0xD2, 0x5A, 0xD9,
	 0x7B, 0x3E, 0x11, 0x6F, 0x17, 0x5A, 0x59, 0x56, 0x05, 0x1F, 0xAE, 0x75, 0xEE, 0x97, 0x07, 0x47,
	 0x74, 0x2E, 0xEB, 0xF3, 0x06, 0xED, 0x1B, 0xDD, 0x26, 0x8A, 0x45, 0xFF, 0x08, 0xA6, 0xF7, 0x36,
	 0x74, 0x1E, 0x5E, 0x09, 0xD4, 0x6F, 0xAD, 0xDB, 0xF6, 0x3F, 0x47, 0xEB, 0xF1, 0xBB, 0xFD, 0x83,
	 0xC7, 0x04, 0x26, 0x80, 0x3D, 0x65, 0xCB, 0xBA, 0x92, 0xB5, 0x76, 0xEB, 0x1F, 0xFC, 0x69, 0xDB,
	 0xB2, 0x39, 0xFD, 0x7F, 0x87, 0x8B, 0x7F, 0xFB, 0x1D, 0xBA, 0xDA, 0x06, 0xF8, 0xA4, 0x55, 0x02,
	 0x07, 0x5B, 0x73, 0x08, 0x4B, 0xDD, 0x8B, 0xF3, 0x0D, 0xF9, 0xE1, 0xF8, 0xF7, 0xC6, 0x07, 0x5F,
	 0x6D, 0xC3, 0x24, 0x24, 0x82, 0xB5, 0x48, 0xA2, 0x35, 0xDB, 0xB6, 0x2D, 0x5D, 0x05, 0x2A, 0x88,
	 0x56, 0x63, 0xFC, 0x52, 0x1E, 0x0E, 0x1F, 0xBA, 0x7E, 0xEC, 0x1F, 0x05, 0xBE, 0xAC, 0x6D, 0x08,
	 0x53, 0xED, 0x03, 0x79, 0xEB, 0xF2, 0x05, 0x74, 0xA6, 0xB2, 0x3C, 0x05, 0x0A, 0x31, 0xB7, 0x5A,
	 0x25, 0x22, 0x05, 0xD7, 0x5E, 0x58, 0x46, 0xED, 0xF8, 0xFF, 0x06, 0x3C, 0x7A, 0x77, 0x02, 0x2C,
	 0x20, 0xC3, 0x20, 0x2F, 0x2C, 0x3B, 0x09, 0xBF, 0xDF, 0x3D, 0x00, 0x3A, 0x3D, 0x2D, 0x51, 0xD2,
	 0xBF, 0x2D, 0xDA, 0xAE, 0x07, 0xBC, 0xF2, 0xAE, 0x70, 0x7D, 0x05, 0x7A, 0x4C, 0x10, 0xB2, 0x9C,
	 0x15, 0x35, 0x03, 0xF5, 0x0B, 0x63, 0x75, 0xFA, 0xF8, 0xBB, 0x73, 0x8A, 0x04, 0x08, 0x0F, 0x3C,
	 0x0D, 0x5A, 0xDF, 0x0D, 0x3C, 0x3B, 0x74, 0x09, 0x18, 0xAD, 0x17, 0x27, 0x46, 0xEB, 0xEA, 0x2C,
	 0x17, 0xBA, 0xF9, 0x5F, 0x3D, 0x33, 0x3C, 0x3A, 0x90, 0xE7, 0x74, 0x01, 0x4E, 0xA2, 0x11, 0xDC,
	 0x81, 0x66, 0x7E, 0xEC, 0x00, 0xBA, 0x97, 0xAD, 0x32, 0xE4, 0xCD, 0x16, 0x50, 0x81, 0xD7, 0xA1,
	 0xAB, 0xD8, 0xC2, 0xA6, 0x02, 0x3C, 0x1B, 0x77, 0x95, 0x86, 0x89, 0x9B, 0xEC, 0xD2, 0x05, 0x9A,
	 0xF8, 0x1F, 0x40, 0x37, 0xD7, 0x21, 0x57, 0x56, 0x55, 0x8A, 0x7C, 0xE8, 0xE5, 0xBA, 0xD0, 0x05,
	 0xEB, 0x8B, 0xEE, 0x6F, 0xD8, 0x73, 0xAC, 0x4F, 0x2B, 0xE8, 0x08, 0x6A, 0xEE, 0x0B, 0x5A, 0x75,
	 0xF4, 0xB0, 0x28, 0x08, 0xDC, 0x7D, 0x10, 0x15, 0x0D, 0x0C, 0xB0, 0x29, 0xB2, 0xDB, 0xB0, 0x20,
	 0x04, 0xEB, 0xE6, 0x44, 0x2C, 0x10, 0xAD, 0xB5, 0x03, 0x04, 0xF3, 0x4D, 0xF7, 0xED, 0x0B, 0x3B,
	 0x2E, 0x3F, 0x75, 0x2E, 0xBE, 0xA5, 0x44, 0xDF, 0x7F, 0xB9, 0x1B, 0x00, 0x3B, 0xD9, 0x72, 0x15,
	 0xB9, 0x35, 0x06, 0x0E, 0x33, 0xDF, 0xB0, 0x0D, 0x36, 0x0A, 0x5C, 0x63, 0x7F, 0xEB, 0xA1, 0x2B,
	 0xCB, 0x76, 0x9D, 0x43, 0xE2, 0xBE, 0xEC, 0xFB, 0xEB, 0x94, 0x1A, 0x1F, 0x5D, 0x5E, 0xB8, 0xCD,
	 0xA5, 0x94, 0x50, 0x52, 0xD9, 0x4F, 0x6C, 0x5A, 0x58, 0x43, 0xC3, 0x20, 0xEC, 0x7F, 0xC3, 0x83,
	 0xF9, 0x50, 0x77, 0x07, 0xE3, 0x05, 0x39, 0xCD, 0x41, 0xC1, 0x43, 0xB7, 0x5B, 0x4A, 0x90, 0x08,
	 0x0D, 0x81, 0xC3, 0x3B, 0x6F, 0x21, 0x90, 0xB0, 0xBA, 0x05, 0xC0, 0x16, 0x02, 0x76, 0xB9, 0xBD,
	 0x5B, 0x4D, 0x02, 0x41, 0x67, 0x72, 0x05, 0x6B, 0xDF, 0x1F, 0x9A, 0x78, 0x72, 0xC3, 0x17, 0xC9,
	 0x12, 0x5C, 0xA0, 0x41, 0x11, 0x07, 0xF3, 0x56, 0x71, 0xC6, 0xAC, 0xEB, 0xEE, 0x17, 0xF8, 0xE9,
	 0xF4, 0x2B, 0x06, 0xB5, 0x0A, 0x75, 0xD9, 0x97, 0x01, 0x0D, 0x83, 0xC1, 0x02, 0x38, 0xDF, 0x2D,
	 0x02, 0xA3, 0x42, 0x3C, 0xE8, 0xED, 0xC6, 0x09, 0x17, 0x41, 0x83, 0xC3, 0x18, 0xF9, 0xEE, 0xD9,
	 0x73, 0x04, 0xC1, 0x0B, 0xD1, 0xEB, 0x8B, 0xCB, 0xEF, 0x5A, 0x09, 0x22, 0xEB, 0xAD, 0x33, 0xC9,
	 0x74, 0x1B, 0x2D, 0xAC, 0x52, 0x07, 0x1C, 0x7F, 0x85, 0x41, 0xEB, 0xF4, 0x0A, 0x7D, 0x37, 0xC7,
	 0x51, 0x56, 0x93, 0xC9, 0x2E, 0xF6, 0xBA, 0xCD, 0x53, 0x2A, 0xD6, 0xD9, 0xB0, 0xBB, 0x9C, 0xBA,
	 0xEB, 0xE8, 0xFE, 0x8B, 0x75, 0x04, 0x85, 0xF6, 0x74, 0xBB, 0xF7, 0x62, 0x7F, 0x38, 0xF8, 0x5E,
	 0x59, 0x5B, 0x34, 0x0B, 0xF9, 0x33, 0xC8, 0xEE, 0x99, 0xBC, 0x1D, 0x2E, 0xE1, 0xBB, 0x24, 0x2B,
	 0x74, 0x1F, 0x83, 0xFA, 0x16, 0x57, 0xB6, 0x7B, 0x56, 0xBE, 0x7B, 0xBD, 0xBA, 0x5E, 0x98, 0x6E,
	 0xE9, 0x5F, 0xB4, 0xC5, 0x16, 0x54, 0xD8, 0x6D, 0x09, 0x2A, 0x10, 0xEB, 0xDC, 0xC3, 0xC3, 0x1B,
	 0x3A, 0x56, 0xD7, 0x05, 0x7E, 0x8B, 0xFB, 0x8B, 0x05, 0xB9, 0x4B, 0xD9, 0xF0, 0xED, 0xC8, 0x73,
	 0x02, 0xA5, 0xD1, 0xE9, 0x18, 0x4C, 0x6D, 0xCD, 0x2E, 0x27, 0x7C, 0x06, 0x66, 0xBE, 0x05, 0x7D,
	 0xBE, 0xF7, 0x04, 0x0B, 0xE7, 0xCC, 0x08, 0x46, 0x42, 0x48, 0x42, 0x1F, 0x7F, 0xFF, 0x13, 0x37,
	 0x0D, 0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0xFF, 0xAD, 0x68, 0x6A, 0x28, 0x63, 0x29, 0x20,
	 0x31, 0x39, 0x38, 0x39, 0xE3, 0xB7, 0x2D, 0x04, 0x39, 0x33, 0x0D, 0x51, 0x75, 0xE9, 0xDF, 0x40,
	 0x7D, 0x64, 0x65, 0x63, 0x6B, 0x20, 0xDE, 0xFA, 0x4F, 0x66, 0x66, 0x69, 0x63, 0xE9, 0x53, 0x79,
	 0x73, 0x6F, 0xDC, 0x11, 0x6D, 0x73, 0xFA, 0x49, 0x6E, 0x63, 0xA0, 0xF5, 0x2E, 0x0D, 0x0D, 0x00,
	 0x9C, 0xDA, 0x56, 0x14, 0x10, 0x63, 0x02, 0x57, 0x04, 0x83, 0xBC, 0x03, 0x5B, 0x64, 0x2D, 0x64,
	 0x4E, 0x96, 0xB0, 0x0D, 0x0C, 0xA0, 0x35, 0x63, 0xD8, 0x9C, 0x7D, 0x4F, 0x62, 0x65, 0x16, 0x20,
	 0x05, 0x0A, 0x30, 0x33, 0x0B, 0x6F, 0x07, 0x20, 0x44, 0x45, 0x0F, 0x76, 0xFB, 0xEC, 0x69, 0x65,
	 0x77, 0x26, 0x53, 0x3D, 0x24, 0x21, 0x5E, 0x97, 0xFA, 0x65, 0x44, 0x1D, 0xD6, 0x2F, 0x16, 0x20,
	 0x0C, 0xBC, 0x10, 0x71, 0x75, 0x69, 0x1F, 0x60, 0xDB, 0x2F, 0x4F, 0x0C, 0x33, 0x9A, 0x7B, 0xEB,
	 0x68, 0xB1, 0x9C, 0x9A, 0xEB, 0x1F, 0x54, 0x06, 0x47, 0x02, 0x06, 0x60, 0xA4, 0xB6, 0xC0, 0x6C,
	 0x36, 0x65, 0x34, 0xD8, 0xDA, 0x75, 0x18, 0x2F, 0x6F, 0x1E, 0x14, 0x55, 0x20, 0x30, 0xEB, 0x6B,
	 0x20, 0x8D, 0xC6, 0x26, 0xE4, 0x4C, 0x64, 0xC0, 0x04, 0x96, 0xB7, 0xEF, 0x6B, 0x87, 0x63, 0x3E,
	 0x61, 0x73, 0x39, 0x70, 0x5A, 0x38, 0x5B, 0xBB, 0x72, 0x75, 0x6D, 0x7F, 0x5C, 0x6F, 0xDE, 0x81,
	 0x66, 0xA4, 0x6B, 0xBA, 0xE6, 0x30, 0x6A, 0x27, 0x6C, 0xB4, 0xD6, 0x20, 0xEF, 0xFE, 0x83, 0x1B,
	 0x4D, 0x61, 0x78, 0x2F, 0x70, 0x58, 0x48, 0x5B, 0x64, 0x63, 0xA2, 0x5D, 0x0F, 0xDC, 0x83, 0x64,
	 0xB5, 0xB0, 0x0C, 0xB9, 0xAC, 0x6D, 0x63, 0x68, 0xC3, 0x59, 0x6B, 0xF0, 0x63, 0x75, 0x40, 0x9C,
	 0xD6, 0x40, 0xF2, 0x6D, 0xA0, 0xA0, 0xB5, 0x06, 0x4B, 0xC1, 0xC2, 0xE2, 0xDA, 0xEF, 0x33, 0x7C,
	 0x09, 0x53, 0x0D, 0xD9, 0xC2, 0x88, 0xBC, 0xC0, 0xBA, 0x1D, 0x2C, 0x1E, 0x85, 0xB0, 0x81, 0x6F,
	 0xB0, 0x46, 0x31, 0x2C, 0xC1, 0xB1, 0x32, 0x2D, 0x62, 0x6F, 0xF6, 0x82, 0xF8, 0xED, 0x2D, 0x7C,
	 0x17, 0x53, 0x56, 0x2B, 0x82, 0xF0, 0x49, 0x04, 0x1D, 0xC2, 0x7A, 0x2B, 0x2C, 0x2C, 0x90, 0x24,
	 0x80, 0xCB, 0xAE, 0x2B, 0x81, 0xB0, 0x64, 0x33, 0x86, 0xAD, 0xE4, 0x73, 0x6F, 0xB4, 0x33, 0x00,
	 0x26, 0x13, 0x00, 0xEC, 0xA0, 0xC0, 0x09, 0xDC, 0x49, 0xC8, 0xF1, 0xA8, 0x99, 0x36, 0x58, 0x50,
	 0x9F, 0x7F, 0x75, 0x81, 0x0E, 0x96, 0x07, 0x12, 0xB7, 0xFF, 0x51, 0x50, 0x92, 0xF7, 0xE3, 0x91,
	 0x58, 0x03, 0x03, 0xD1, 0x8B, 0x02, 0x41, 0xDE, 0x54, 0x68, 0x99, 0x28, 0x1D, 0x74, 0xE5, 0x50,
	 0x31, 0x32, 0xF6, 0xFF, 0xED, 0x8A, 0xC8, 0x58, 0x80, 0xE9, 0x8C, 0xE4, 0xF9, 0x09, 0x77, 0x11,
	 0x33, 0xE2, 0xFF, 0x92, 0x72, 0x07, 0x03, 0xC1, 0x83, 0xD2, 0x00, 0x73, 0xE3, 0x6C, 0xEF, 0xE2,
	 0x99, 0xF9, 0x4E, 0x5B, 0x2D, 0x90, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0xFF, 0xA4, 0xE8, 0x34,
	 0x00, 0x72, 0xFA, 0x41, 0xE8, 0x29, 0x00, 0xE3, 0x35, 0x73, 0xF9, 0x83, 0xE9, 0x03, 0x72, 0x06,
	 0x88, 0xCC, 0xAC, 0xF7, 0xD0, 0x95, 0x31, 0xC9, 0xE8, 0x15, 0x00, 0x11, 0xC9, 0x75, 0x08, 0x41,
	 0xE8, 0x0D, 0x00, 0x73, 0xFB, 0x41, 0x41, 0x41, 0x8D, 0x03, 0x96, 0xF3, 0xA4, 0x96, 0xEB, 0xCE,
	 0xE8, 0x02, 0x00, 0x11, 0xC9, 0x01, 0xDB, 0x75, 0x04, 0xAD, 0x11, 0xC0, 0x93, 0xC3, 0x5E, 0xB9,
	 0x68, 0x00, 0xAC, 0x2C, 0xE8, 0x3C, 0x01, 0x77, 0xF9, 0xC1, 0x04, 0x08, 0x29, 0x34, 0xAD, 0xE2,
	 0xF1, 0xC3
	};

	Bit8u some_data_files[2808] = {
	 0xEB, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x06, 0x00, 0x00, 0x00, 0xBC, 0x78, 0x0C, 0xFC, 0x33, 0xDB, 0xB9, 0x45, 0x44, 0xBA, 0x51, 0x53,
	 0xB8, 0x01, 0x2B, 0xCD, 0x21, 0x85, 0xDB, 0x74, 0x05, 0xC6, 0x06, 0x0B, 0x0A, 0x01, 0xE8, 0x9E,
	 0x09, 0xE8, 0xF4, 0x08, 0x72, 0x30, 0xE8, 0x89, 0x09, 0x72, 0x27, 0xB8, 0xFF, 0x00, 0x2B, 0x06,
	 0x06, 0x01, 0x73, 0x02, 0x33, 0xC0, 0x39, 0x06, 0x12, 0x01, 0x76, 0x0A, 0xA3, 0x12, 0x01, 0xBA,
	 0xE1, 0x07, 0xB4, 0x09, 0xCD, 0x21, 0x83, 0x3E, 0x12, 0x01, 0x00, 0x75, 0x12, 0xE8, 0x82, 0x08,
	 0x32, 0xC0, 0xB4, 0x4C, 0xCD, 0x21, 0xB4, 0x09, 0xCD, 0x21, 0xB8, 0x01, 0x4C, 0xCD, 0x21, 0xE8,
	 0x6A, 0x08, 0xBA, 0xAC, 0x07, 0x80, 0x3E, 0x0B, 0x0A, 0x00, 0x75, 0xEA, 0x33, 0xC0, 0x87, 0x06,
	 0x2C, 0x00, 0x8E, 0xC0, 0xB4, 0x49, 0xCD, 0x21, 0xB4, 0x0D, 0xCD, 0x21, 0x8C, 0xCA, 0x83, 0xC2,
	 0x17, 0xA1, 0x02, 0x00, 0x2B, 0xC2, 0xE8, 0x66, 0x09, 0x8B, 0x0E, 0x12, 0x01, 0x3B, 0xC1, 0x76,
	 0x01, 0x91, 0xA3, 0x0C, 0x01, 0xA3, 0x0A, 0x01, 0x8B, 0x16, 0x12, 0x01, 0xC5, 0x1E, 0x02, 0x01,
	 0x3B, 0xC2, 0x73, 0x03, 0xE8, 0x5D, 0x09, 0x1E, 0x53, 0xE8, 0x83, 0x07, 0xE3, 0x02, 0xF3, 0xA4,
	 0x5B, 0x1F, 0x8B, 0xE0, 0x8C, 0xC8, 0x05, 0x06, 0x00, 0x2E, 0x8B, 0x0E, 0x0C, 0x01, 0xE8, 0x16,
	 0x00, 0x2E, 0x8A, 0x1E, 0x12, 0x01, 0x2E, 0x0A, 0x1E, 0x13, 0x01, 0xB7, 0x31, 0x2E, 0x8B, 0x16,
	 0x10, 0x01, 0x2E, 0xFF, 0x26, 0x0E, 0x01, 0x8E, 0xC0, 0x33, 0xFF, 0x8C, 0x47, 0x02, 0x89, 0x3F,
	 0x26, 0xC7, 0x05, 0xFF, 0xFF, 0x8B, 0xDF, 0x06, 0x1F, 0x26, 0x89, 0x4D, 0x04, 0x2E, 0xA1, 0x08,
	 0x01, 0xF7, 0xE1, 0x91, 0xBF, 0x06, 0x00, 0x32, 0xC0, 0xC3, 0xF3, 0xAA, 0x93, 0xCD, 0x21, 0x49,
	 0x6C, 0x6C, 0x65, 0x67, 0x61, 0x6C, 0x20, 0x46, 0x49, 0x4C, 0x45, 0x53, 0x20, 0x70, 0x61, 0x72,
	 0x61, 0x6D, 0x65, 0x74, 0x65, 0x72, 0x3A, 0x20, 0x24, 0x0D, 0x0A, 0x46, 0x49, 0x4C, 0x45, 0x53,
	 0x3A, 0x20, 0x50, 0x72, 0x65, 0x73, 0x73, 0x20, 0x3C, 0x45, 0x53, 0x43, 0x3E, 0x20, 0x74, 0x6F,
	 0x20, 0x75, 0x6E, 0x6C, 0x6F, 0x61, 0x64, 0x20, 0x46, 0x49, 0x4C, 0x45, 0x53, 0x20, 0x6F, 0x72,
	 0x20, 0x61, 0x6E, 0x79, 0x20, 0x6F, 0x74, 0x68, 0x65, 0x72, 0x20, 0x6B, 0x65, 0x79, 0x0D, 0x0A,
	 0x74, 0x6F, 0x20, 0x63, 0x6F, 0x6E, 0x74, 0x69, 0x6E, 0x75, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68,
	 0x20, 0x46, 0x49, 0x4C, 0x45, 0x53, 0x2E, 0x2E, 0x2E, 0x24, 0x0D, 0x46, 0x49, 0x4C, 0x45, 0x53,
	 0x20, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x3A, 0x0D, 0x0A, 0x24, 0x20, 0x20, 0x20,
	 0x4E, 0x4F, 0x50, 0x41, 0x55, 0x53, 0x45, 0x4F, 0x4E, 0x45, 0x52, 0x52, 0x4F, 0x52, 0x09, 0x44,
	 0x6F, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x70, 0x61, 0x75, 0x73, 0x65, 0x20, 0x6F, 0x6E, 0x20, 0x65,
	 0x72, 0x72, 0x6F, 0x72, 0x0D, 0x20, 0x20, 0x20, 0x50, 0x41, 0x55, 0x53, 0x45, 0x09, 0x50, 0x61,
	 0x75, 0x73, 0x65, 0x20, 0x77, 0x68, 0x69, 0x6C, 0x65, 0x20, 0x70, 0x61, 0x72, 0x73, 0x69, 0x6E,
	 0x67, 0x20, 0x63, 0x6F, 0x6D, 0x6D, 0x61, 0x6E, 0x64, 0x73, 0x0D, 0x20, 0x20, 0x20, 0x48, 0x45,
	 0x4C, 0x50, 0x09, 0x44, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20,
	 0x68, 0x65, 0x6C, 0x70, 0x20, 0x74, 0x65, 0x78, 0x74, 0x0D, 0x20, 0x20, 0x20, 0x3F, 0x09, 0x4C,
	 0x69, 0x73, 0x74, 0x20, 0x61, 0x6C, 0x6C, 0x20, 0x63, 0x6F, 0x6D, 0x6D, 0x61, 0x6E, 0x64, 0x73,
	 0x00, 0x50, 0x72, 0x65, 0x73, 0x73, 0x20, 0x61, 0x6E, 0x79, 0x20, 0x6B, 0x65, 0x79, 0x20, 0x66,
	 0x6F, 0x72, 0x20, 0x6E, 0x65, 0x78, 0x74, 0x20, 0x70, 0x61, 0x67, 0x65, 0x2E, 0x2E, 0x2E, 0x00,
	 0x00, 0x00, 0x4F, 0x0B, 0x4F, 0x0B, 0x00, 0x01, 0x01, 0x71, 0x04, 0x4E, 0x4F, 0x50, 0x41, 0x55,
	 0x53, 0x45, 0x4F, 0x4E, 0x45, 0x52, 0x52, 0x4F, 0x52, 0x20, 0x4E, 0x4F, 0x50, 0x45, 0x00, 0x37,
	 0x03, 0x6D, 0x03, 0x50, 0x41, 0x55, 0x53, 0x45, 0x00, 0x00, 0x00, 0x22, 0x05, 0x48, 0x45, 0x4C,
	 0x50, 0x00, 0x9F, 0x0B, 0x3E, 0x07, 0x3F, 0x00, 0x00, 0x00, 0x63, 0x05, 0x00, 0x2E, 0xC6, 0x07,
	 0x00, 0xC3, 0x2E, 0xFF, 0x36, 0x32, 0x03, 0x2E, 0xC7, 0x06, 0x32, 0x03, 0x3B, 0x03, 0xE8, 0x79,
	 0x00, 0x2E, 0x8F, 0x06, 0x32, 0x03, 0xC3, 0x2E, 0x8B, 0x16, 0x32, 0x03, 0x2E, 0x89, 0x16, 0x34,
	 0x03, 0x52, 0x2E, 0x80, 0x3E, 0x31, 0x03, 0x00, 0x75, 0x26, 0xE8, 0x5D, 0x00, 0x73, 0x1F, 0x85,
	 0xD2, 0x74, 0x1D, 0x81, 0xFA, 0x6F, 0x04, 0x75, 0x12, 0xE8, 0xC6, 0xFF, 0x73, 0x10, 0x81, 0xFA,
	 0x6F, 0x04, 0x75, 0x07, 0x2E, 0xFF, 0x16, 0x39, 0x03, 0xEB, 0x03, 0xE8, 0xB3, 0x00, 0xEB, 0xD2,
	 0x5A, 0xC3, 0x2E, 0x80, 0x3E, 0x37, 0x03, 0x00, 0x74, 0x06, 0x2E, 0xC6, 0x06, 0x36, 0x03, 0x01,
	 0xC3, 0xE8, 0xB3, 0xFF, 0x2E, 0x80, 0x3E, 0x31, 0x03, 0x00, 0x75, 0x0C, 0xE8, 0x0F, 0x00, 0x32,
	 0xC0, 0x2E, 0x38, 0x06, 0x31, 0x03, 0x74, 0x05, 0x2E, 0xA0, 0x30, 0x03, 0xF9, 0xC3, 0x2E, 0x80,
	 0x3E, 0x36, 0x03, 0x00, 0x74, 0x03, 0xE8, 0x35, 0x01, 0xC3, 0x50, 0x53, 0x57, 0x06, 0x0E, 0x07,
	 0xFC, 0x33, 0xD2, 0x2E, 0x8B, 0x3E, 0x32, 0x03, 0xE8, 0xF2, 0x00, 0x72, 0x59, 0x56, 0xE8, 0xA6,
	 0x00, 0xAE, 0x75, 0x07, 0xE8, 0xC8, 0x00, 0x74, 0x2E, 0xEB, 0xF3, 0xE8, 0xC1, 0x00, 0x75, 0x09,
	 0x26, 0x8A, 0x45, 0xFF, 0xE8, 0xA7, 0x00, 0x74, 0x1E, 0x5E, 0x26, 0x8A, 0x45, 0xFF, 0x3C, 0x20,
	 0x74, 0xDB, 0x84, 0xC0, 0x74, 0x03, 0x47, 0xEB, 0xF1, 0x83, 0xC7, 0x04, 0x26, 0x80, 0x3D, 0x00,
	 0x75, 0xCB, 0xBA, 0x6F, 0x04, 0xEB, 0x1F, 0x4E, 0x4F, 0x32, 0xC0, 0xAE, 0x75, 0xFD, 0xE8, 0xC6,
	 0x00, 0x06, 0x2E, 0x8B, 0x1D, 0xBA, 0x70, 0x04, 0xF8, 0x2E, 0xFF, 0x55, 0x02, 0x07, 0x5B, 0x73,
	 0x08, 0x8B, 0xF3, 0xBA, 0x70, 0x04, 0xF9, 0xEB, 0x01, 0xF8, 0x07, 0x5F, 0x5B, 0x58, 0xC3, 0x24,
	 0x24, 0x2E, 0x80, 0x3E, 0x38, 0x03, 0x00, 0x74, 0x03, 0xE8, 0x07, 0x00, 0xE8, 0x76, 0x00, 0xE8,
	 0x40, 0xFF, 0xC3, 0x50, 0x56, 0x52, 0x1E, 0x0E, 0x1F, 0xBA, 0x0F, 0x02, 0xB4, 0x09, 0xCD, 0x21,
	 0x1F, 0xAC, 0xE8, 0x39, 0x00, 0x74, 0x08, 0x8A, 0xD0, 0xB4, 0x02, 0xCD, 0x21, 0xEB, 0xF2, 0xB4,
	 0x02, 0xB2, 0x0D, 0xCD, 0x21, 0xB4, 0x02, 0xB2, 0x0A, 0xCD, 0x21, 0x5A, 0x1E, 0x0E, 0x1F, 0xB4,
	 0x09, 0xCD, 0x21, 0x1F, 0x5E, 0x58, 0xC3, 0xAC, 0x3C, 0x61, 0x72, 0x06, 0x3C, 0x7A, 0x77, 0x02,
	 0x2C, 0x20, 0xC3, 0x20, 0x2F, 0x2C, 0x3B, 0x09, 0x0D, 0x0A, 0x00, 0x3A, 0x3D, 0x2D, 0x51, 0x57,
	 0x06, 0x0E, 0x07, 0xBF, 0xC3, 0x04, 0xB9, 0x08, 0x00, 0xF2, 0xAE, 0x07, 0x5F, 0x59, 0xC3, 0xE8,
	 0xEC, 0xFF, 0x74, 0x10, 0x51, 0x57, 0x06, 0x0E, 0x07, 0xBF, 0xCB, 0x04, 0xB9, 0x03, 0x00, 0xF2,
	 0xAE, 0x07, 0x5F, 0x59, 0xC3, 0xAC, 0xE8, 0xD5, 0xFF, 0x75, 0xFA, 0x4E, 0xC3, 0x8A, 0x04, 0xE8,
	 0xCC, 0xFF, 0x75, 0x0F, 0x3C, 0x0D, 0x74, 0x0D, 0x3C, 0x3B, 0x74, 0x09, 0x3C, 0x0A, 0x74, 0x05,
	 0x46, 0xEB, 0xEA, 0xF8, 0xC3, 0xF9, 0xC3, 0xAC, 0x3C, 0x3D, 0x74, 0x05, 0x3C, 0x3A, 0x74, 0x01,
	 0x4E, 0xC3, 0x2E, 0x80, 0x3E, 0x38, 0x03, 0x00, 0x74, 0x03, 0xE8, 0x01, 0x00, 0xC3, 0x1E, 0x0E,
	 0x1F, 0x2E, 0xC6, 0x06, 0x36, 0x03, 0x00, 0xBA, 0x29, 0x02, 0xB4, 0x09, 0xCD, 0x21, 0x32, 0xE4,
	 0xCD, 0x16, 0x50, 0xB2, 0x0D, 0xB4, 0x02, 0xCD, 0x21, 0xB2, 0x0A, 0xB4, 0x02, 0xCD, 0x21, 0x58,
	 0x3C, 0x1B, 0x75, 0x0C, 0x2E, 0xC6, 0x06, 0x31, 0x03, 0x01, 0x2E, 0xC6, 0x06, 0x30, 0x03, 0x01,
	 0xF8, 0x1F, 0xC3, 0x2E, 0x80, 0x3E, 0x38, 0x03, 0x00, 0x75, 0x02, 0xF8, 0xC3, 0x56, 0x55, 0x1E,
	 0x0E, 0x1F, 0xBA, 0x7A, 0x02, 0xB4, 0x09, 0xCD, 0x21, 0x8B, 0x36, 0x34, 0x03, 0x8B, 0xEE, 0x33,
	 0xDB, 0xAC, 0x84, 0xC0, 0x74, 0x2B, 0xE8, 0x79, 0x00, 0x3C, 0x20, 0x75, 0xF4, 0xB0, 0x28, 0xE8,
	 0x70, 0x00, 0xAC, 0x84, 0xC0, 0x74, 0x15, 0x3C, 0x20, 0x75, 0x0C, 0xB0, 0x29, 0xE8, 0x62, 0x00,
	 0xB0, 0x20, 0xE8, 0x5D, 0x00, 0xEB, 0xE6, 0xE8, 0x58, 0x00, 0xEB, 0xE6, 0xB0, 0x29, 0xE8, 0x51,
	 0x00, 0x83, 0xC6, 0x04, 0x80, 0x3C, 0x00, 0x75, 0x0B, 0x3B, 0x2E, 0x34, 0x03, 0x75, 0x2E, 0xBE,
	 0x3B, 0x03, 0x8B, 0xEE, 0xB9, 0x1B, 0x00, 0x3B, 0xD9, 0x72, 0x15, 0xB9, 0x35, 0x00, 0x3B, 0xD9,
	 0x72, 0x0E, 0xB0, 0x0D, 0xE8, 0x2B, 0x00, 0xB0, 0x0A, 0xE8, 0x26, 0x00, 0x33, 0xDB, 0xEB, 0xA1,
	 0x2B, 0xCB, 0x76, 0x9D, 0xB0, 0x20, 0xE8, 0x19, 0x00, 0xE2, 0xFB, 0xEB, 0x94, 0xB0, 0x0D, 0xE8,
	 0x10, 0x00, 0xB0, 0x0A, 0xE8, 0x0B, 0x00, 0x1F, 0x5D, 0x5E, 0x2E, 0xC6, 0x06, 0x31, 0x03, 0x01,
	 0xF8, 0xC3, 0x50, 0x52, 0x8A, 0xD0, 0xB4, 0x02, 0xCD, 0x21, 0x5A, 0x58, 0x43, 0xC3, 0xB0, 0x0D,
	 0xE8, 0xEF, 0xFF, 0xB0, 0x0A, 0xE8, 0xEA, 0xFF, 0xC3, 0x83, 0xF9, 0x50, 0x77, 0x07, 0xE3, 0x05,
	 0xE8, 0xDF, 0xFF, 0xE2, 0xFB, 0xC3, 0x00, 0x00, 0xB0, 0x20, 0x8B, 0x0E, 0x26, 0x06, 0xE8, 0xE8,
	 0xFF, 0xC3, 0xE8, 0xF3, 0xFF, 0xB0, 0xBA, 0xE8, 0xC8, 0xFF, 0xC3, 0xB0, 0xBA, 0xE8, 0xC2, 0xFF,
	 0xE8, 0xCB, 0xFF, 0xC3, 0x8B, 0x4D, 0x02, 0x41, 0x2B, 0xCB, 0x72, 0x05, 0xB0, 0x20, 0xE8, 0xC8,
	 0xFF, 0xC3, 0xE8, 0xDD, 0xFF, 0x33, 0xDB, 0xB0, 0x20, 0xE8, 0xA6, 0xFF, 0xAC, 0x84, 0xC0, 0x74,
	 0x12, 0x3C, 0x0D, 0x74, 0x11, 0x3C, 0x09, 0x75, 0x05, 0xE8, 0xD8, 0xFF, 0xEB, 0xEE, 0xE8, 0x91,
	 0xFF, 0xEB, 0xE9, 0x4E, 0xEB, 0x06, 0x80, 0x3C, 0x0A, 0x75, 0x01, 0x46, 0x8B, 0x0D, 0x83, 0xC1,
	 0x02, 0x2B, 0xCB, 0x72, 0x05, 0xB0, 0x20, 0xE8, 0x8F, 0xFF, 0xE8, 0xAE, 0xFF, 0x42, 0xC3, 0xE8,
	 0xA0, 0xFF, 0xE8, 0x1A, 0x00, 0x8B, 0x1D, 0x83, 0xC3, 0x02, 0x2B, 0xD9, 0x73, 0x04, 0x33, 0xDB,
	 0xEB, 0x0B, 0xD1, 0xEB, 0x8B, 0xCB, 0xB0, 0x20, 0x33, 0xDB, 0xE8, 0x6C, 0xFF, 0xEB, 0xAD, 0x33,
	 0xC9, 0x50, 0x56, 0xAC, 0x3C, 0x0D, 0x74, 0x07, 0x84, 0xC0, 0x74, 0x03, 0x41, 0xEB, 0xF4, 0x5E,
	 0x58, 0xC3, 0x50, 0x53, 0x51, 0x56, 0xE8, 0x5F, 0xFF, 0xB0, 0xC9, 0xE8, 0x34, 0xFF, 0xB0, 0xCD,
	 0x8B, 0x0D, 0x83, 0xC1, 0x02, 0xE8, 0x41, 0xFF, 0xB0, 0xBB, 0xE8, 0x25, 0xFF, 0xE8, 0x2E, 0xFF,
	 0xBA, 0x01, 0x00, 0x8B, 0x75, 0x04, 0x85, 0xF6, 0x74, 0x08, 0xE8, 0xA2, 0xFF, 0x80, 0x3C, 0x00,
	 0x75, 0xF8, 0x5E, 0x59, 0x5B, 0x58, 0xC3, 0x50, 0x53, 0x51, 0xE8, 0x2B, 0xFF, 0xB0, 0xC8, 0xE8,
	 0x00, 0xFF, 0xB0, 0xCD, 0x8B, 0x0D, 0x83, 0xC1, 0x02, 0xE8, 0x0D, 0xFF, 0xB0, 0xBC, 0xE8, 0xF1,
	 0xFE, 0x59, 0x5B, 0x58, 0xC3, 0x85, 0xF6, 0x74, 0x24, 0x80, 0x3C, 0x00, 0x74, 0x1F, 0x83, 0xFA,
	 0x16, 0x72, 0x15, 0x56, 0xBE, 0x11, 0x03, 0xE8, 0x28, 0xFF, 0x5E, 0xE8, 0xC9, 0xFF, 0xB4, 0x00,
	 0xCD, 0x16, 0xE8, 0xD9, 0xFE, 0xE8, 0x8A, 0xFF, 0xE8, 0x17, 0xFF, 0xEB, 0xDC, 0xC3, 0x2E, 0x80,
	 0x3E, 0x38, 0x03, 0x00, 0x74, 0x3A, 0x56, 0x1E, 0x0E, 0x1F, 0x8B, 0xFB, 0x8B, 0x05, 0xB9, 0x4B,
	 0x00, 0x2B, 0xC8, 0x73, 0x02, 0x33, 0xC9, 0xD1, 0xE9, 0x89, 0x0E, 0x26, 0x06, 0xE8, 0x62, 0xFF,
	 0x8B, 0x75, 0x06, 0xE8, 0xAF, 0xFF, 0xBE, 0x8D, 0x02, 0xE8, 0xA9, 0xFF, 0x8B, 0x75, 0x08, 0xE8,
	 0xA3, 0xFF, 0xE8, 0x82, 0xFF, 0xE8, 0x96, 0xFE, 0x1F, 0x5E, 0x2E, 0xC6, 0x06, 0x31, 0x03, 0x01,
	 0xF8, 0xC3, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x73, 0x20, 0x61, 0x64, 0x64, 0x65, 0x64, 0x0D, 0x0A,
	 0x24, 0x20, 0x6E, 0x6F, 0x77, 0x24, 0x20, 0x28, 0x69, 0x6E, 0x20, 0x74, 0x68, 0x65, 0x20, 0x48,
	 0x4D, 0x41, 0x29, 0x24, 0x20, 0x62, 0x65, 0x66, 0x6F, 0x72, 0x65, 0x24, 0x46, 0x49, 0x4C, 0x45,
	 0x53, 0x20, 0x63, 0x61, 0x6E, 0x6E, 0x6F, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x64, 0x64, 0x65,
	 0x64, 0x20, 0x69, 0x6E, 0x73, 0x69, 0x64, 0x65, 0x20, 0x44, 0x45, 0x53, 0x51, 0x76, 0x69, 0x65,
	 0x77, 0x0D, 0x0A, 0x24, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x73, 0x20, 0x6E, 0x6F, 0x77, 0x0D, 0x0A,
	 0x24, 0x59, 0x6F, 0x75, 0x20, 0x63, 0x61, 0x6E, 0x6E, 0x6F, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65,
	 0x20, 0x6D, 0x6F, 0x72, 0x65, 0x20, 0x74, 0x68, 0x61, 0x6E, 0x20, 0x32, 0x35, 0x35, 0x20, 0x46,
	 0x49, 0x4C, 0x45, 0x53, 0x0D, 0x0A, 0x24, 0x20, 0x20, 0x20, 0x46, 0x49, 0x4C, 0x45, 0x53, 0x20,
	 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x73, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x69, 0x6E, 0x63,
	 0x72, 0x65, 0x61, 0x73, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6D, 0x61, 0x78, 0x69, 0x6D,
	 0x75, 0x6D, 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x20, 0x6F, 0x66, 0x0D, 0x20, 0x20, 0x20,
	 0x44, 0x4F, 0x53, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x20, 0x68, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x73,
	 0x0D, 0x0D, 0x53, 0x79, 0x6E, 0x74, 0x61, 0x78, 0x3A, 0x0D, 0x20, 0x20, 0x20, 0x46, 0x49, 0x4C,
	 0x45, 0x53, 0x20, 0x5B, 0x70, 0x61, 0x72, 0x61, 0x6D, 0x5D, 0x0D, 0x20, 0x20, 0x20, 0x46, 0x49,
	 0x4C, 0x45, 0x53, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x6E, 0x6F, 0x20, 0x70, 0x61, 0x72, 0x61,
	 0x6D, 0x65, 0x74, 0x65, 0x72, 0x20, 0x73, 0x68, 0x6F, 0x77, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
	 0x63, 0x75, 0x72, 0x72, 0x65, 0x6E, 0x74, 0x20, 0x61, 0x6D, 0x6F, 0x75, 0x6E, 0x74, 0x0D, 0x0D,
	 0x46, 0x49, 0x4C, 0x45, 0x53, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6D, 0x65, 0x74, 0x65, 0x72, 0x73,
	 0x0D, 0x20, 0x20, 0x20, 0x6E, 0x75, 0x6D, 0x09, 0x53, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20,
	 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x20, 0x6F, 0x66, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x20, 0x68,
	 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x73, 0x0D, 0x20, 0x20, 0x20, 0x3D, 0x6E, 0x75, 0x6D, 0x09, 0x53,
	 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x20, 0x6F, 0x66,
	 0x20, 0x66, 0x69, 0x6C, 0x65, 0x20, 0x68, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x73, 0x0D, 0x20, 0x20,
	 0x20, 0x2B, 0x6E, 0x75, 0x6D, 0x09, 0x49, 0x6E, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x20, 0x74,
	 0x68, 0x65, 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x20, 0x6F, 0x66, 0x20, 0x66, 0x69, 0x6C,
	 0x65, 0x20, 0x68, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x73, 0x20, 0x62, 0x79, 0x20, 0x6E, 0x75, 0x6D,
	 0x0D, 0x00, 0x33, 0xDB, 0xB4, 0x3E, 0xCD, 0x21, 0x43, 0x83, 0xFB, 0x05, 0x72, 0xF6, 0xC3, 0x0E,
	 0x1F, 0xA1, 0x0A, 0x01, 0x01, 0x06, 0x06, 0x01, 0xE8, 0x6E, 0x00, 0xBA, 0x82, 0x07, 0xB4, 0x09,
	 0xCD, 0x21, 0xE8, 0x8D, 0x00, 0xE8, 0xDA, 0xFF, 0x2E, 0xA1, 0x08, 0x01, 0x2E, 0xF7, 0x26, 0x0C,
	 0x01, 0x05, 0x6F, 0x00, 0x8B, 0xF8, 0xB1, 0x04, 0xD3, 0xE8, 0x2E, 0xA3, 0x10, 0x01, 0x0E, 0x1F,
	 0xBE, 0x0A, 0x02, 0x3B, 0xFE, 0x77, 0x06, 0x33, 0xC9, 0x87, 0xF7, 0xEB, 0x05, 0x0E, 0x07, 0xB9,
	 0x05, 0x00, 0x89, 0x3E, 0x0E, 0x01, 0x8B, 0xC7, 0x05, 0x10, 0x01, 0xC3, 0x50, 0xB4, 0x02, 0xCD,
	 0x21, 0x58, 0xC3, 0x33, 0xD2, 0xF7, 0xF3, 0x52, 0xD4, 0x0A, 0x84, 0xE4, 0x75, 0x02, 0xE3, 0x09,
	 0x80, 0xC4, 0x30, 0x8A, 0xD4, 0xE8, 0xE4, 0xFF, 0x41, 0x84, 0xC0, 0x75, 0x02, 0xE3, 0x08, 0x04,
	 0x30, 0x8A, 0xD0, 0xE8, 0xD6, 0xFF, 0x41, 0x5A, 0xC3, 0x51, 0xBB, 0xE8, 0x03, 0x33, 0xC9, 0xE8,
	 0xD1, 0xFF, 0x8B, 0xC2, 0xBB, 0x0A, 0x00, 0xE8, 0xC9, 0xFF, 0x80, 0xC2, 0x30, 0xE8, 0xBC, 0xFF,
	 0x59, 0xC3, 0x46, 0x49, 0x4C, 0x45, 0x53, 0x3D, 0x24, 0x0D, 0x0A, 0x24, 0x52, 0xBA, 0xA4, 0x07,
	 0xEB, 0x04, 0x52, 0xBA, 0x91, 0x07, 0x0E, 0x1F, 0x50, 0x53, 0x52, 0xBA, 0xD2, 0x09, 0xB4, 0x09,
	 0xCD, 0x21, 0xA1, 0x06, 0x01, 0xE8, 0xC1, 0xFF, 0x5A, 0xB4, 0x09, 0xCD, 0x21, 0xBA, 0xD9, 0x09,
	 0xB4, 0x09, 0xCD, 0x21, 0x5A, 0x5B, 0x58, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x80, 0x3E, 0x0B,
	 0x0A, 0x00, 0x74, 0x05, 0xB8, 0x1B, 0x10, 0xCD, 0x15, 0xC3, 0x2E, 0x80, 0x3E, 0x0B, 0x0A, 0x00,
	 0x74, 0x05, 0xB8, 0x1C, 0x10, 0xCD, 0x15, 0xC3, 0xB4, 0x52, 0xCD, 0x21, 0x26, 0xC4, 0x5F, 0x04,
	 0xE8, 0xD9, 0xFF, 0x33, 0xC0, 0x26, 0x03, 0x47, 0x04, 0x26, 0x83, 0x3F, 0xFF, 0x74, 0x05, 0x26,
	 0xC4, 0x1F, 0xEB, 0xF1, 0xA3, 0x06, 0x01, 0xE8, 0xD0, 0xFF, 0x89, 0x1E, 0x02, 0x01, 0x8C, 0x06,
	 0x04, 0x01, 0xB8, 0x28, 0x00, 0x80, 0x3E, 0x09, 0x0A, 0x02, 0x74, 0x14, 0xB0, 0x38, 0x83, 0x3E,
	 0x09, 0x0A, 0x03, 0x74, 0x0B, 0xB0, 0x3B, 0x80, 0x3E, 0x09, 0x0A, 0x04, 0x73, 0x02, 0xB0, 0x35,
	 0xA3, 0x08, 0x01, 0xF8, 0xC3, 0xAC, 0x3C, 0x2B, 0x75, 0x07, 0xC6, 0x06, 0x08, 0x0A, 0x01, 0xEB,
	 0x0C, 0x3C, 0x3D, 0x75, 0x07, 0xC6, 0x06, 0x08, 0x0A, 0x00, 0xEB, 0x01, 0x4E, 0xC3, 0xE8, 0xE4,
	 0xFF, 0x8B, 0xFE, 0x8A, 0x04, 0x2C, 0x30, 0x3C, 0x09, 0x77, 0x20, 0xBB, 0x12, 0x01, 0xE8, 0x0E,
	 0x01, 0x72, 0x18, 0x80, 0x3E, 0x08, 0x0A, 0x00, 0x75, 0x0F, 0xA1, 0x06, 0x01, 0x29, 0x06, 0x12,
	 0x01, 0x73, 0x06, 0xC7, 0x06, 0x12, 0x01, 0x00, 0x00, 0xF8, 0xC3, 0x8B, 0xF7, 0xE8, 0xB1, 0xF9,
	 0xF9, 0xC3, 0xBE, 0x81, 0x00, 0xC7, 0x06, 0x39, 0x03, 0x8E, 0x0A, 0xE8, 0x03, 0xF9, 0xC3, 0xB4,
	 0x30, 0xCD, 0x21, 0x3C, 0x0A, 0x72, 0x05, 0xB8, 0x03, 0x1E, 0xEB, 0x07, 0x3C, 0x05, 0x76, 0x03,
	 0xB8, 0x05, 0x00, 0xA3, 0x09, 0x0A, 0xC3, 0x51, 0x52, 0x05, 0x06, 0x00, 0x2E, 0xF7, 0x26, 0x08,
	 0x01, 0x05, 0x0F, 0x00, 0x83, 0xD2, 0x00, 0xB9, 0x10, 0x00, 0xF7, 0xF1, 0x5A, 0x59, 0xC3, 0x51,
	 0x52, 0xB9, 0x10, 0x00, 0xF7, 0xE1, 0x2D, 0x06, 0x00, 0x83, 0xDA, 0x00, 0x2E, 0xF7, 0x36, 0x08,
	 0x01, 0x5A, 0x59, 0xC3, 0x2B, 0xD0, 0x74, 0x34, 0x8B, 0xCA, 0x8B, 0xC2, 0x53, 0xE8, 0xC7, 0xFF,
	 0x93, 0xB4, 0x48, 0xCD, 0x21, 0x73, 0x12, 0x93, 0xE8, 0xD4, 0xFF, 0x8B, 0xC8, 0xE3, 0x1E, 0xE8,
	 0xB5, 0xFF, 0x93, 0xB4, 0x48, 0xCD, 0x21, 0x72, 0x14, 0x2E, 0x01, 0x0E, 0x0A, 0x01, 0x5B, 0x51,
	 0x52, 0xE8, 0xA3, 0xF6, 0xF3, 0xAA, 0x5A, 0x59, 0x2B, 0xD1, 0x75, 0xCC, 0xC3, 0x5B, 0xC3, 0x2B,
	 0x00, 0x08, 0x0A, 0xA9, 0x0B, 0x3D, 0x00, 0x08, 0x0A, 0x6D, 0x03, 0x00, 0x20, 0x46, 0x49, 0x4C,
	 0x45, 0x53, 0x20, 0x0D, 0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x28, 0x63,
	 0x29, 0x20, 0x31, 0x39, 0x38, 0x38, 0x2D, 0x31, 0x39, 0x39, 0x33, 0x0D, 0x51, 0x75, 0x61, 0x72,
	 0x74, 0x65, 0x72, 0x64, 0x65, 0x63, 0x6B, 0x20, 0x4F, 0x66, 0x66, 0x69, 0x63, 0x65, 0x20, 0x53,
	 0x79, 0x73, 0x74, 0x65, 0x6D, 0x73, 0x2C, 0x20, 0x49, 0x6E, 0x63, 0x2E, 0x0D, 0x0D, 0x00, 0x3D,
	 0x00, 0x13, 0x00, 0x5C, 0x0B, 0x07, 0x08, 0x00, 0x00, 0x2E, 0xC6, 0x07, 0x01, 0xF8, 0xC3, 0xE8,
	 0x18, 0x00, 0x85, 0xD2, 0x75, 0x05, 0x2E, 0x89, 0x07, 0xF8, 0xC3, 0xF9, 0xC3, 0x51, 0x50, 0x92,
	 0xF7, 0xE3, 0x91, 0x58, 0xF7, 0xE3, 0x03, 0xD1, 0x59, 0xC3, 0x33, 0xC0, 0x99, 0x51, 0x53, 0xBB,
	 0x0A, 0x00, 0x50, 0xE8, 0xE1, 0xF8, 0x32, 0xED, 0x8A, 0xC8, 0x58, 0x80, 0xE9, 0x30, 0x80, 0xF9,
	 0x09, 0x77, 0x11, 0xE8, 0xD7, 0xFF, 0x72, 0x07, 0x03, 0xC1, 0x83, 0xD2, 0x00, 0x73, 0xE3, 0xB8,
	 0xFF, 0xFF, 0x99, 0xF9, 0x4E, 0x5B, 0x59, 0xC3
	};

	Bit8u some_data_lastdriv[2383] = {
	 0x81, 0xFC, 0x31, 0x0D, 0x77, 0x02, 0xCD, 0x20, 0xB9, 0x4F, 0x09, 0xBE, 0x4F, 0x0A, 0xBF, 0xD1,
	 0x0C, 0xBB, 0x00, 0x80, 0xFD, 0xF3, 0xA4, 0xFC, 0x87, 0xF7, 0x83, 0xEE, 0xC6, 0x19, 0xED, 0x57,
	 0x57, 0xE9, 0x59, 0x0B, 0x55, 0x50, 0x58, 0x21, 0x0D, 0x01, 0x04, 0x0A, 0x9A, 0x43, 0xB4, 0xF6,
	 0xCC, 0xE3, 0xD0, 0xC8, 0x6C, 0x0B, 0xC0, 0x08, 0x06, 0x52, 0x5D, 0xF3, 0xE9, 0x03, 0x49, 0x00,
	 0x51, 0x03, 0x16, 0xFF, 0xFF, 0x00, 0x21, 0x00, 0xB2, 0x41, 0x85, 0xED, 0x74, 0x0F, 0xFC, 0x51,
	 0x2E, 0x8B, 0x0E, 0x07, 0x01, 0xFD, 0xFF, 0xF3, 0xA4, 0xFE, 0xC2, 0x4D, 0x75, 0xF4, 0x59, 0x32,
	 0xC0, 0x06, 0x1F, 0x8B, 0xF7, 0xFF, 0x83, 0x13, 0xAA, 0x59, 0x88, 0x14, 0xC7, 0x44, 0x01, 0x3A,
	 0x5C, 0x2C, 0x6F, 0x04, 0x49, 0xFF, 0xFF, 0x4B, 0xFB, 0xF2, 0x4D, 0xC6, 0x44, 0x4F, 0x02, 0x2E,
	 0xFB, 0x7F, 0xE2, 0xD5, 0x2E, 0xC5, 0x36, 0x03, 0x01, 0xFA, 0x88, 0x5C, 0x21, 0x15, 0xF7, 0x5B,
	 0x50, 0x00, 0x8C, 0x44, 0x18, 0xFB, 0x37, 0xFF, 0x7F, 0x09, 0x01, 0xE3, 0x06, 0x8E, 0xC1, 0xB4,
	 0x49, 0xCD, 0x21, 0x8D, 0x95, 0x9F, 0x01, 0xB1, 0xBF, 0xFD, 0x04, 0xD3, 0xEA, 0xB8, 0x00, 0x31,
	 0x0C, 0x8B, 0xC0, 0x90, 0x51, 0x44, 0xC8, 0xFE, 0x4C, 0x53, 0x54, 0x44, 0x52, 0x56, 0x00, 0x00,
	 0x7F, 0x7B, 0x50, 0xB4, 0x02, 0x1F, 0x58, 0xC3, 0x33, 0xD2, 0xF7, 0xF3, 0xFF, 0xFF, 0x52, 0xD4,
	 0x0A, 0x84, 0xE4, 0x75, 0x02, 0xE3, 0x09, 0x80, 0xC4, 0x30, 0x8A, 0xD4, 0xE8, 0x01, 0x6D, 0xF7,
	 0x96, 0x41, 0x84, 0xC0, 0x0E, 0x08, 0x04, 0x0D, 0xFD, 0x9F, 0xD0, 0x5A, 0xC3, 0x51, 0xBB, 0xE8,
	 0x34, 0xCB, 0xC9, 0xBB, 0xBF, 0x0B, 0x9D, 0x8B, 0xC2, 0xBB, 0x0A, 0x00, 0x07, 0x80, 0xC2, 0x65,
	 0xBB, 0x30, 0x19, 0x59, 0xC3, 0x52, 0x66, 0xFE, 0x50, 0xBA, 0x7F, 0x0A, 0xB4, 0x09, 0x17, 0x3F,
	 0xF6, 0xC3, 0xBA, 0xA1, 0x0A, 0xC3, 0x52, 0xBA, 0x53, 0x0A, 0x63, 0xDB, 0x50, 0x53, 0x05, 0x3E,
	 0x0E, 0x8A, 0x9A, 0xED, 0x16, 0xDF, 0x01, 0x37, 0x40, 0x5A, 0xEF, 0xFE, 0x0E, 0x5B, 0x58, 0x5A,
	 0x20, 0x49, 0x0A, 0xEB, 0xDD, 0xB7, 0xDB, 0xB4, 0x52, 0x0D, 0x89, 0x1E, 0xD4, 0x8C, 0x06, 0xFE,
	 0xFF, 0x05, 0x01, 0x83, 0x3E, 0xE1, 0x01, 0x03, 0x75, 0x0C, 0xC7, 0x06, 0x0B, 0x01, 0x17, 0x00,
	 0xF6, 0xDF, 0x05, 0x0D, 0x01, 0x1B, 0x00, 0x32, 0xED, 0x8B, 0x3E, 0x07, 0xCB, 0xF6, 0x26, 0x8A,
	 0x09, 0x06, 0x0B, 0xC4, 0xDD, 0xC2, 0x19, 0xB8, 0x4B, 0x80, 0x25, 0x04, 0x0B, 0x6F, 0xA2, 0xB0,
	 0x58, 0xA3, 0x30, 0x89, 0xB3, 0xB5, 0x0E, 0x56, 0x3D, 0x94, 0xF8, 0x7F, 0x96, 0x01, 0x1E, 0x85,
	 0xDB, 0x75, 0x13, 0x8C, 0xC3, 0x4B, 0x8E, 0xDB, 0xFF, 0x5F, 0x5D, 0x33, 0xF6, 0xBF, 0x80, 0x01,
	 0xB9, 0x08, 0x00, 0xF3, 0xA6, 0x74, 0x1B, 0x9B, 0x2B, 0x20, 0x24, 0x88, 0x69, 0xB6, 0x01, 0x07,
	 0x96, 0x8A, 0xFB, 0x9F, 0x34, 0x8C, 0x01, 0xEB, 0x0A, 0xB9, 0x06, 0x21, 0xDF, 0x7E, 0xA4, 0xAD,
	 0x1F, 0xA3, 0x09, 0x40, 0x0E, 0x8E, 0x01, 0xF8, 0xDB, 0x0B, 0x10, 0xDB, 0xB4, 0x3E, 0x8E, 0x43,
	 0xFE, 0xFF, 0x83, 0xFB, 0x05, 0x72, 0xF6, 0xC3, 0xAC, 0x25, 0xDF, 0x00, 0x2C, 0x40, 0x3C, 0x1B,
	 0xF5, 0xFF, 0xDF, 0x09, 0x3C, 0x20, 0x74, 0xFB, 0x3C, 0x09, 0x74, 0xF7, 0x4E, 0xC3, 0xBE, 0x81,
	 0xDA, 0x77, 0x98, 0x75, 0x05, 0xF8, 0x02, 0xE8, 0xA4, 0xED, 0xEF, 0x17, 0x2B, 0x75, 0x07, 0xC6,
	 0x06, 0xDE, 0x01, 0x4A, 0xFB, 0xEC, 0x0C, 0x3C, 0x3D, 0x0A, 0x00, 0xEB, 0x01, 0x25, 0xD7, 0x7E,
	 0xE8, 0x02, 0xDD, 0x8B, 0xFE, 0xA7, 0x0D, 0xED, 0x6D, 0x75, 0x08, 0x0B, 0xBB, 0xA3, 0x92, 0x20,
	 0xF6, 0xDB, 0x06, 0xBB, 0x04, 0xE8, 0x0C, 0x21, 0x72, 0x18, 0x16, 0x76, 0x7B, 0x0F, 0xA1, 0x83,
	 0x29, 0x06, 0x12, 0x05, 0xF7, 0x73, 0x06, 0xC7, 0x05, 0x41, 0xD6, 0x68, 0x7B, 0x03, 0x52, 0xBB,
	 0xFD, 0xAB, 0xF9, 0xC3, 0xB4, 0x30, 0x80, 0x3C, 0x0A, 0x61, 0xFE, 0x7F, 0xB8, 0x03, 0x1E, 0xEB,
	 0x07, 0x3C, 0x04, 0x76, 0x03, 0xB8, 0x04, 0x00, 0xA3, 0xB7, 0xDF, 0xF0, 0xC3, 0xBC, 0xEC, 0x0C,
	 0xFC, 0x9E, 0xB9, 0x45, 0xD6, 0xFE, 0x44, 0xBA, 0x51, 0x53, 0xB8, 0x01, 0x2B, 0x24, 0xED, 0x97,
	 0xED, 0x74, 0x05, 0x7B, 0xE3, 0xE8, 0x03, 0xFD, 0xF0, 0x31, 0xBA, 0x5A, 0x0A, 0x15, 0x02, 0x76,
	 0x74, 0xB7, 0xAD, 0x6D, 0x62, 0x6F, 0x04, 0xD0, 0x72, 0x9C, 0xE1, 0x78, 0xBC, 0x02, 0x4F, 0x5A,
	 0x6F, 0x17, 0x29, 0xEB, 0x67, 0x10, 0x1B, 0xBA, 0x15, 0xDF, 0x75, 0x22, 0xE3, 0x0E, 0x51, 0x33,
	 0xC0, 0x87, 0x06, 0xFB, 0xF1, 0x2C, 0x00, 0x8E, 0xC0, 0x30, 0xB4, 0x0D, 0x03, 0xFF, 0x71, 0xBF,
	 0x90, 0x33, 0xEF, 0x8C, 0xCE, 0x03, 0xFE, 0x37, 0xFE, 0x8B, 0x36, 0x02, 0x00, 0x2B, 0xF7, 0xB8,
	 0x6F, 0xF7, 0xC6, 0xD1, 0xFD, 0x00, 0xF0, 0x75, 0x06, 0x8B, 0xC6, 0x18, 0xE0, 0x45, 0xD8, 0x25,
	 0x36, 0x07, 0x34, 0x0B, 0xAD, 0x92, 0x4F, 0x1B, 0x1A, 0xBF, 0xF0, 0x76, 0x05, 0xBA, 0xAB, 0xB9,
	 0x09, 0x3B, 0xC3, 0x73, 0x17, 0xC3, 0x0B, 0xCF, 0xE6, 0xEB, 0x04, 0xD0, 0x56, 0xB6, 0x92, 0x4C,
	 0x0D, 0x75, 0xED, 0xFA, 0x32, 0x56, 0x08, 0xA1, 0xA4, 0xC3, 0xEB, 0x09, 0x05, 0x6D, 0x7C, 0x8E,
	 0xC7, 0x33, 0xFF, 0xA4, 0x92, 0xFD, 0xB2, 0x41, 0x2E, 0x8B, 0xDD, 0x03, 0xD9, 0x89, 0x1A, 0xCE,
	 0x49, 0x29, 0x1B, 0xD1, 0xD8, 0x95, 0xAE, 0x07, 0x7E, 0xA1, 0xD0, 0x9C, 0xE9, 0x01, 0x0D, 0x2B,
	 0x00, 0xBB, 0x17, 0x15, 0x1D, 0x0C, 0x3D, 0x05, 0xA9, 0x05, 0xE3, 0xFF, 0x00, 0x49, 0x6C, 0x6C,
	 0x65, 0x67, 0x61, 0x6C, 0x20, 0x4C, 0x41, 0xBD, 0xFF, 0xFF, 0x49, 0x56, 0x45, 0x20, 0x70, 0x61,
	 0x72, 0x61, 0x6D, 0x65, 0x74, 0x65, 0x72, 0x3A, 0x4B, 0xF6, 0x20, 0x24, 0x0D, 0x0A, 0x17, 0x0D,
	 0xF8, 0x7F, 0x50, 0x72, 0x65, 0x73, 0x73, 0x20, 0x3C, 0x45, 0x53, 0x43, 0x3E, 0xF6, 0x5F, 0xA3,
	 0x6F, 0x20, 0x75, 0x6E, 0x6C, 0x6F, 0x61, 0x64, 0x38, 0xFB, 0x03, 0x6F, 0x72, 0x20, 0x61, 0x6E,
	 0x79, 0x06, 0xFB, 0x76, 0x74, 0x68, 0x3B, 0x20, 0x6B, 0x65, 0x79, 0x3C, 0xFF, 0x5D, 0x25, 0x63,
	 0x6F, 0x6E, 0x74, 0x69, 0x6E, 0x75, 0x65, 0x20, 0xCB, 0xDA, 0x77, 0x69, 0x17, 0x2C, 0xAC, 0xB5,
	 0x2E, 0x00, 0x5C, 0x3A, 0xAD, 0xBB, 0x73, 0x1D, 0x63, 0x36, 0xB7, 0xDB, 0x73, 0x3A, 0x33, 0x24,
	 0x20, 0x00, 0x4E, 0x4F, 0xFD, 0xFF, 0x50, 0x41, 0x55, 0x53, 0x45, 0x4F, 0x4E, 0x45, 0x52, 0x52,
	 0x4F, 0x52, 0x09, 0x44, 0xBB, 0xB6, 0x46, 0x6E, 0x55, 0x98, 0x75, 0x73, 0x2D, 0xB7, 0x65, 0x5E,
	 0x6E, 0x20, 0x72, 0x31, 0xB7, 0x6B, 0x0D, 0x27, 0x25, 0xF6, 0xD8, 0x09, 0x50, 0x17, 0x77, 0x68,
	 0x69, 0xC9, 0xDB, 0xBE, 0xBC, 0x73, 0x6E, 0x67, 0x76, 0xEF, 0xB6, 0x6D, 0x6D, 0x8C, 0x64, 0x73,
	 0x25, 0xFD, 0xF6, 0x48, 0x45, 0x4C, 0x50, 0x43, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x6D, 0xAD, 0x9D,
	 0x84, 0x08, 0x20, 0x7B, 0xBB, 0x69, 0x6C, 0x70, 0x09, 0x65, 0x78, 0x74, 0x1E, 0x5A, 0xFB, 0x3F,
	 0x09, 0x4C, 0x12, 0x5D, 0xC9, 0x16, 0x03, 0x6C, 0x35, 0x7B, 0xB3, 0x00, 0xEA, 0xCD, 0xC7, 0x5C,
	 0xB7, 0x20, 0x66, 0xD9, 0x6E, 0x2D, 0xC9, 0xED, 0x5D, 0x67, 0x65, 0xB9, 0x85, 0xC6, 0xB6, 0x2A,
	 0x04, 0x01, 0x00, 0x0F, 0x2D, 0xEC, 0xAD, 0x06, 0xAA, 0x15, 0xFE, 0xB9, 0x45, 0x00, 0x73, 0x05,
	 0x58, 0xB7, 0x8B, 0x15, 0x28, 0x5E, 0x07, 0x7E, 0xEF, 0xFE, 0x00, 0x13, 0x0C, 0x7A, 0x09, 0x3F,
	 0x0E, 0x9F, 0x07, 0x00, 0x2E, 0xF8, 0xB7, 0xC6, 0x03, 0xC3, 0x2E, 0xFF, 0x36, 0x6E, 0x05, 0x2E,
	 0xE3, 0xD6, 0x8F, 0x04, 0x77, 0x05, 0x8B, 0x9B, 0x7B, 0x34, 0x2E, 0x8F, 0x09, 0x14, 0x8B, 0xF1,
	 0x9B, 0x16, 0x89, 0x16, 0x70, 0x05, 0x52, 0x2E, 0x6E, 0xB9, 0x40, 0x6D, 0x05, 0x26, 0x1B, 0xA5,
	 0xFF, 0x73, 0x1F, 0x85, 0xD2, 0x74, 0x1D, 0x81, 0xFA, 0xAB, 0x0B, 0x8D, 0xFD, 0x12, 0xE8, 0x05,
	 0xAC, 0x73, 0x10, 0x0A, 0x07, 0xB8, 0xB1, 0x41, 0x16, 0xB9, 0xEB, 0x03, 0x2B, 0xED, 0xC8, 0xEB,
	 0xD2, 0xE0, 0x2F, 0xDB, 0xA5, 0x73, 0x74, 0x06, 0x5C, 0x06, 0xB6, 0xA5, 0x72, 0xDC, 0xC3, 0x27,
	 0xC1, 0x96, 0xC1, 0x41, 0x0C, 0x28, 0xB6, 0x37, 0x28, 0x2E, 0x38, 0x06, 0x0C, 0x74, 0x7C, 0xDF,
	 0x5B, 0xA0, 0x6C, 0x05, 0xF9, 0x2B, 0x72, 0xE3, 0xCD, 0x3A, 0x07, 0x68, 0xC3, 0x19, 0xA3, 0x74,
	 0x57, 0x06, 0xC2, 0xED, 0x95, 0x6D, 0xD2, 0x7B, 0x3E, 0xDD, 0xBE, 0x11, 0x37, 0x72, 0x59, 0x56,
	 0x31, 0xF1, 0xAE, 0xFB, 0xAD, 0x5F, 0x0B, 0x19, 0x74, 0x2E, 0xEB, 0xF3, 0x06, 0xBB, 0xB5, 0x75,
	 0x09, 0x13, 0x45, 0xFF, 0x08, 0xE9, 0x7D, 0x08, 0x74, 0x1E, 0x5E, 0x09, 0xA1, 0x5B, 0xAB, 0xDB,
	 0xB8, 0x3F, 0x47, 0x6E, 0xFF, 0xEB, 0xF1, 0x83, 0xC7, 0x04, 0x26, 0x80, 0x3D, 0x65, 0xCB, 0xBA,
	 0xAD, 0xDD, 0x92, 0xEB, 0x1F, 0xFC, 0x69, 0xB6, 0x6C, 0x39, 0xFD, 0x51, 0x87, 0xDF, 0xFE, 0x8B,
	 0x1D, 0xBA, 0xAC, 0x06, 0xF8, 0xA4, 0x55, 0x02, 0x07, 0x5B, 0x52, 0xF7, 0x73, 0x08, 0x8B, 0xF3,
	 0x0D, 0xF9, 0xAE, 0xBD, 0xF1, 0xF8, 0x07, 0x5F, 0x86, 0xC3, 0x24, 0x24, 0x3B, 0xD2, 0x82, 0x74,
	 0x06, 0xBD, 0x2D, 0xB7, 0x6D, 0x2F, 0xAD, 0xFC, 0x88, 0x56, 0x52, 0xC7, 0xF8, 0x1E, 0x0E, 0x1F,
	 0xBA, 0x37, 0xE1, 0x1F, 0xAC, 0x0A, 0x7C, 0x6D, 0x08, 0x15, 0xDB, 0x07, 0x3B, 0xEB, 0xF2, 0x05,
	 0xB2, 0xE9, 0x4C, 0x3B, 0x05, 0x0A, 0x63, 0x6E, 0x5A, 0x25, 0x22, 0x5E, 0x0B, 0xAE, 0x58, 0x13,
	 0xED, 0x06, 0xF1, 0xFF, 0x3C, 0x7A, 0x77, 0x02, 0x2C, 0x20, 0xC3, 0x20, 0x2F, 0x2C, 0x3B, 0x09,
	 0x7F, 0xBF, 0x3D, 0x00, 0x3A, 0x3D, 0x2D, 0x51, 0xD2, 0xBF, 0xFF, 0x06, 0xB4, 0x5D, 0x93, 0xF2,
	 0xAE, 0x70, 0xFB, 0x0A, 0x3C, 0x4C, 0x10, 0x15, 0x20, 0x3F, 0x07, 0x07, 0xB9, 0x03, 0x5B, 0xBF,
	 0x63, 0x75, 0xFA, 0x40, 0x8A, 0x8D, 0xBF, 0x04, 0x08, 0x0F, 0x3C, 0x0D, 0x0D, 0xAD, 0xF5, 0x3C,
	 0x3B, 0x74, 0x09, 0x10, 0x99, 0x6E, 0xEB, 0x46, 0xEB, 0xEA, 0x24, 0xF9, 0x5F, 0xF9, 0x85, 0x3D,
	 0x33, 0x3C, 0x3A, 0x74, 0x01, 0x4E, 0x37, 0xE4, 0x74, 0x81, 0x7B, 0x04, 0x66, 0x00, 0xBA, 0x55,
	 0xAD, 0xB5, 0x1F, 0x32, 0xE4, 0xCD, 0x16, 0x50, 0xA1, 0x02, 0xED, 0xAB, 0xA1, 0xED, 0x42, 0x2B,
	 0xC8, 0x77, 0x95, 0x86, 0x89, 0x6D, 0xEC, 0xD2, 0x05, 0x6C, 0xF8, 0x1F, 0x40, 0x37, 0xD7, 0x20,
	 0x57, 0x56, 0x55, 0x8A, 0x7C, 0xE8, 0xB2, 0xBA, 0xD0, 0x04, 0xEB, 0x8B, 0xEE, 0x6F, 0xD8, 0x6B,
	 0xAC, 0x4F, 0x2B, 0xE8, 0x08, 0x3C, 0x0D, 0x0A, 0x5A, 0xA5, 0xFB, 0xDC, 0xB0, 0x28, 0x08, 0x10,
	 0x15, 0x0D, 0xB7, 0xB9, 0x0C, 0xB0, 0x29, 0xB0, 0x20, 0x04, 0x58, 0x64, 0xEB, 0xE6, 0x10, 0xBD,
	 0xFD, 0x83, 0xC6, 0x04, 0x80, 0x3C, 0x4D, 0x0B, 0x3B, 0x2E, 0xE8, 0xBE, 0x3F, 0x75, 0x2E, 0xBE,
	 0x77, 0x44, 0xB9, 0xF7, 0x17, 0xC0, 0x3B, 0xD9, 0x72, 0x15, 0xB9, 0x35, 0x06, 0xCC, 0xF7, 0x0E,
	 0xB0, 0x0D, 0x36, 0x0A, 0xD8, 0xDF, 0x5C, 0xEB, 0xA1, 0x2B, 0xCB, 0x76, 0x9D, 0x43, 0x2F, 0xFB,
	 0xE2, 0xFB, 0xEB, 0x94, 0x1A, 0x1F, 0x5D, 0x6E, 0xB3, 0x5E, 0xA5, 0x94, 0x50, 0x52, 0xF6, 0x13,
	 0x6C, 0x5A, 0x58, 0x43, 0xC3, 0x20, 0xFB, 0x5F, 0xC3, 0x83, 0xF9, 0x50, 0x77, 0x07, 0xE3, 0x05,
	 0x39, 0x73, 0x10, 0x83, 0x43, 0xED, 0x56, 0x5C, 0x62, 0x08, 0x0D, 0xCE, 0xDB, 0x53, 0xC3, 0x21,
	 0x62, 0xB0, 0xBA, 0xB0, 0xC5, 0x05, 0x02, 0x48, 0x6E, 0x2F, 0x53, 0x4D, 0x02, 0x41, 0x67, 0x72,
	 0x05, 0xDA, 0x77, 0x1F, 0x6C, 0x78, 0xF0, 0xC5, 0x72, 0xC9, 0x12, 0x28, 0xD0, 0x5C, 0x11, 0xD4,
	 0xF3, 0xD6, 0xAF, 0xC6, 0x7E, 0xEB, 0xEE, 0x0D, 0xFC, 0xE9, 0xF3, 0xFD, 0x06, 0x80, 0x7B, 0x01,
	 0x92, 0xFD, 0x46, 0x8B, 0x0D, 0x83, 0xC1, 0x02, 0x38, 0xED, 0xDD, 0x02, 0x75, 0x42, 0x3C, 0x02,
	 0xDB, 0x8D, 0xE9, 0x41, 0x83, 0xC3, 0x18, 0xD9, 0xF2, 0xDD, 0x73, 0x04, 0xC1, 0x0B, 0xD1, 0xEB,
	 0x8B, 0xCB, 0xDE, 0xB5, 0x09, 0x22, 0xEB, 0xAD, 0x33, 0xC9, 0xE8, 0x36, 0x2D, 0xAC, 0x52, 0x07,
	 0x38, 0xFE, 0x85, 0x41, 0xEB, 0xF4, 0x0A, 0xFB, 0x6E, 0xC7, 0x51, 0x56, 0x93, 0xC9, 0xBA, 0x5D,
	 0xEC, 0xCD, 0x53, 0x2A, 0xB0, 0x81, 0xB3, 0xBB, 0x9C, 0xBA, 0x8B, 0x74, 0x7F, 0x8B, 0x75, 0x04,
	 0x85, 0xF6, 0x74, 0xBB, 0xC9, 0xB1, 0x3F, 0x38, 0xF8, 0x5E, 0x59, 0x5B, 0x34, 0x85, 0x7C, 0x33,
	 0xC8, 0xF7, 0xCC, 0xBC, 0x1D, 0x2E, 0xF0, 0x5D, 0x24, 0x2B, 0x74, 0x1F, 0x83, 0xFA, 0x16, 0xDF,
	 0xBD, 0x57, 0x56, 0xBE, 0x4D, 0xBD, 0x8C, 0x5E, 0xE8, 0x09, 0x31, 0xB9, 0xC2, 0xB4, 0x00, 0xEF,
	 0x54, 0x63, 0xB7, 0x02, 0xFC, 0x10, 0xEB, 0xDC, 0x1B, 0x0D, 0x0F, 0x3A, 0x56, 0xD7, 0x8B, 0x17,
	 0xF8, 0xFB, 0x8B, 0x05, 0xB9, 0x4B, 0xD8, 0xC8, 0x73, 0xC3, 0xB7, 0x02, 0xA5, 0xD1, 0xE9, 0x18,
	 0x1E, 0x2E, 0x6F, 0xDB, 0xFC, 0x7C, 0x06, 0x37, 0x4F, 0xBE, 0xC9, 0xB3, 0xB9, 0x04, 0x05, 0x0B,
	 0x08, 0xD0, 0x39, 0x46, 0x42, 0x1F, 0x04, 0x92, 0x7F, 0x46, 0xFE, 0x07, 0x0D, 0x43, 0x6F, 0x70,
	 0x79, 0x72, 0x69, 0x67, 0x68, 0xFE, 0xB7, 0x6F, 0x28, 0x63, 0x29, 0x20, 0x31, 0x39, 0x38, 0x39,
	 0x2D, 0x8D, 0xDF, 0x04, 0x39, 0x33, 0x0D, 0x51, 0x75, 0xEE, 0x7F, 0x03, 0x96, 0x64, 0x65, 0x63,
	 0x6B, 0x20, 0x4F, 0x66, 0x75, 0xEB, 0x66, 0x69, 0x63, 0xEE, 0x53, 0x79, 0xFF, 0xBF, 0xB9, 0x65,
	 0x6D, 0x73, 0x2C, 0x20, 0x49, 0x6E, 0x63, 0x2E, 0x0D, 0x0D, 0x00, 0x20, 0xAD, 0xF9, 0x64, 0x72,
	 0x69, 0x76, 0x65, 0x64, 0x25, 0xAC, 0x81, 0x64, 0x4B, 0x44, 0x0E, 0x40, 0xEB, 0x63, 0xC9, 0x38,
	 0xFB, 0x40, 0x62, 0x65, 0x18, 0x20, 0x0A, 0x14, 0x21, 0x24, 0x17, 0xDE, 0x07, 0x20, 0x44, 0x45,
	 0x00, 0x76, 0x69, 0xC9, 0xDC, 0x65, 0x77, 0x28, 0x7E, 0xBA, 0xDC, 0x3D, 0x24, 0x26, 0xF0, 0x65,
	 0x6B, 0x07, 0x89, 0x34, 0x1B, 0xB7, 0x09, 0x20, 0x15, 0x71, 0x75, 0x9B, 0x81, 0x69, 0x1A, 0x39,
	 0x4F, 0x03, 0x85, 0x53, 0x8C, 0xF0, 0xD7, 0xDC, 0x68, 0xA7, 0x92, 0x24, 0xD0, 0x5C, 0x54, 0x06,
	 0x51, 0x16, 0x30, 0x5B, 0x9F, 0x6C, 0xB6, 0x05, 0x31, 0x65, 0x39, 0x75, 0xC0, 0xD6, 0x18, 0x2F,
	 0x6F, 0xF7, 0xA0, 0x50, 0x2A, 0x75, 0x58, 0x03, 0x4B, 0x9B, 0xB5, 0x2E, 0x2B, 0x59, 0x1C, 0xC0,
	 0xEC, 0x92, 0x2A, 0xDB, 0xAD, 0x96, 0xCF, 0x69, 0x66, 0x07, 0x32, 0xE0, 0xB0, 0x36, 0xBC, 0x28,
	 0x1C, 0x5B, 0xA3, 0x72, 0x3E, 0x5A, 0x29, 0xB0, 0x19, 0x0E, 0x80, 0x04, 0xDA, 0x20, 0xC4, 0xEF,
	 0xC0, 0x99, 0xC4, 0x70, 0xB7, 0x63, 0x71, 0x61, 0x73, 0x30, 0x9C, 0x39, 0x70, 0x88, 0x73, 0xF6,
	 0x0E, 0xD0, 0x9C, 0x4A, 0x6C, 0x70, 0x20, 0x10, 0x74, 0x50, 0x30, 0x30, 0x17, 0xDC, 0xA0, 0x26,
	 0x84, 0x61, 0x78, 0xC0, 0x1A, 0x5C, 0x4B, 0xC6, 0xE0, 0x5B, 0xE7, 0x5D, 0x41, 0xC2, 0x13, 0x12,
	 0xEE, 0xA3, 0xF4, 0x02, 0x61, 0x5B, 0x9D, 0x68, 0x02, 0xFE, 0x59, 0x60, 0x63, 0x75, 0x72, 0x72,
	 0x65, 0x6E, 0x1B, 0x76, 0x6B, 0x64, 0x64, 0x21, 0x45, 0x41, 0xB2, 0x3D, 0x6B, 0x8F, 0x7D, 0x6C,
	 0x09, 0x53, 0x0B, 0x41, 0x08, 0xD9, 0x36, 0x6D, 0x66, 0x16, 0x39, 0x06, 0x81, 0x7D, 0x26, 0x3D,
	 0x27, 0x4B, 0x0C, 0x2B, 0x4B, 0x6D, 0x2C, 0xD8, 0x09, 0x49, 0xFA, 0x2E, 0x76, 0x5D, 0x10, 0x62,
	 0x1D, 0x6F, 0x66, 0x6E, 0xC1, 0x27, 0xAE, 0x62, 0x79, 0xB0, 0xF1, 0x14, 0x0D, 0x38, 0x81, 0x6F,
	 0x76, 0x00, 0xBE, 0x09, 0xD8, 0x14, 0xE3, 0x41, 0x73, 0x64, 0xB0, 0x90, 0x13, 0x3C, 0x1D, 0x6C,
	 0x4A, 0x75, 0x61, 0x07, 0xFD, 0x5F, 0xDD, 0x51, 0x50, 0x92, 0xF7, 0xE3, 0x91, 0x58, 0x14, 0xB8,
	 0x03, 0x03, 0xD1, 0x0C, 0x16, 0x5B, 0xA8, 0x99, 0xEB, 0xA0, 0xA3, 0x72, 0x50, 0x6F, 0x64, 0xFC,
	 0x07, 0x8A, 0xC8, 0x58, 0x6F, 0xFF, 0x80, 0xE9, 0x8C, 0x81, 0xF9, 0x09, 0x77, 0x11, 0x33, 0x2F,
	 0x72, 0x07, 0x6C, 0xF0, 0x03, 0xC1, 0x83, 0xD2, 0xD5, 0xE3, 0xF8, 0x5D, 0xAC, 0x99, 0xF9, 0x4E,
	 0x5B, 0x59, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0xFF, 0xA4, 0xE8, 0x34, 0x00, 0x72, 0xFA,
	 0x41, 0xE8, 0x29, 0x00, 0xE3, 0x35, 0x73, 0xF9, 0x83, 0xE9, 0x03, 0x72, 0x06, 0x88, 0xCC, 0xAC,
	 0xF7, 0xD0, 0x95, 0x31, 0xC9, 0xE8, 0x15, 0x00, 0x11, 0xC9, 0x75, 0x08, 0x41, 0xE8, 0x0D, 0x00,
	 0x73, 0xFB, 0x41, 0x41, 0x41, 0x8D, 0x03, 0x96, 0xF3, 0xA4, 0x96, 0xEB, 0xCE, 0xE8, 0x02, 0x00,
	 0x11, 0xC9, 0x01, 0xDB, 0x75, 0x04, 0xAD, 0x11, 0xC0, 0x93, 0xC3, 0x5E, 0xB9, 0x65, 0x00, 0xAC,
	 0x2C, 0xE8, 0x3C, 0x01, 0x77, 0xF9, 0xC1, 0x04, 0x08, 0x29, 0x34, 0xAD, 0xE2, 0xF1, 0xC3
	};

	VFILE_Register("BUFFERS.COM",some_data_buffers,2607);
	VFILE_Register("DEVICE.COM",some_data_device,1608);
	VFILE_Register("FCBS.COM",some_data_fcbs,2402);
	VFILE_Register("FILES.COM",some_data_files,2808);
	VFILE_Register("LASTDRIV.COM",some_data_lastdriv,2383);
	VFILE_Register("28.COM",some_data_28,8);
	VFILE_Register("50.COM",some_data_50,8);
	// ==============================================================================================
	
	DOS_PSP psp(psp_seg);
	psp.MakeNew(0);
	dos.psp(psp_seg);

	/* The start of the filetable in the psp must look like this:
	 * 01 01 01 00 02
	 * In order to achieve this: First open 2 files. Close the first and
	 * duplicate the second (so the entries get 01) */
	Bit16u dummy=0;
	DOS_OpenFile("CON",OPEN_READWRITE,&dummy);	/* STDIN  */
	DOS_OpenFile("CON",OPEN_READWRITE,&dummy);	/* STDOUT */
	DOS_CloseFile(0);							/* Close STDIN */
	DOS_ForceDuplicateEntry(1,0);				/* "new" STDIN */
	DOS_ForceDuplicateEntry(1,2);				/* STDERR */
	DOS_OpenFile("CON",OPEN_READWRITE,&dummy);	/* STDAUX */
	DOS_OpenFile("PRN",OPEN_READWRITE,&dummy);	/* STDPRN */

	psp.SetParent(psp_seg);
	/* Set the environment */
	psp.SetEnvironment(env_seg);
	/* Set the command line for the shell start up */
	CommandTail tail;
	tail.count=(Bit8u)strlen(init_line);
	memset(&tail.buffer,0,127);
	strcpy(tail.buffer,init_line);
	MEM_BlockWrite(PhysMake(psp_seg,128),&tail,128);

	/* Setup internal DOS Variables */
	dos.dta(RealMake(psp_seg,0x80));
	dos.psp(psp_seg);


	SHELL_ProgramStart(&first_shell);
	first_shell->Run();
	delete first_shell;
	first_shell = 0;//Make clear that it shouldn't be used anymore
}
